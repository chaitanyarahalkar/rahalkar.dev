---
interface Props {
  username: string
  year?: number
}

const { username, year = 'last' } = Astro.props
---

<div 
  id="github-activity-calendar"
  class="github-calendar-container w-max max-w-full flex flex-col gap-2 text-sm"
  data-username={username}
  data-year={String(year)}
>
  <!-- Loading skeleton -->
  <div class="calendar-skeleton">
    <div class="animate-pulse">
      <div class="h-32 bg-muted/20 rounded"></div>
      <div class="mt-2 flex justify-between">
        <div class="h-4 w-48 bg-muted/20 rounded"></div>
        <div class="flex gap-1">
          {[...Array(6)].map(() => (
            <div class="h-3 w-3 bg-muted/20 rounded"></div>
          ))}
        </div>
      </div>
    </div>
  </div>
  <!-- Actual calendar will be loaded here -->
  <div class="calendar-content hidden"></div>
</div>

<script>
// GitHub Calendar client-side loading
async function loadGitHubCalendar(container: HTMLElement) {
  const username = container.dataset.username
  const year = container.dataset.year || 'last'
  
  const skeleton = container.querySelector('.calendar-skeleton') as HTMLElement
  const content = container.querySelector('.calendar-content') as HTMLElement
  
  try {
    // Check cache first
    const cacheKey = `gh-contrib-${username}-${year}`
    const cached = localStorage.getItem(cacheKey)
    
    let data
    if (cached) {
      const { contributions, timestamp } = JSON.parse(cached)
      // Use cache if less than 1 hour old
      if (Date.now() - timestamp < 3600000) {
        data = contributions
      }
    }
    
    // Fetch if no cache
    if (!data) {
      const response = await fetch(
        `https://github-contributions-api.jogruber.de/v4/${username}?y=${year}`
      )
      
      if (!response.ok) {
        throw new Error('Failed to load contributions')
      }
      
      const result = await response.json()
      data = result
      
      // Cache the result
      try {
        localStorage.setItem(cacheKey, JSON.stringify({
          contributions: data,
          timestamp: Date.now()
        }))
      } catch (e) {
        // Ignore storage errors
      }
    }
    
    // Render the calendar
    renderCalendar(content, data, year)
    
    // Show content, hide skeleton
    skeleton.classList.add('hidden')
    content.classList.remove('hidden')
    
  } catch (error) {
    console.error('Failed to load GitHub calendar:', error)
    skeleton.innerHTML = '<div class="text-sm text-muted-foreground">Unable to load GitHub contributions</div>'
  }
}

function renderCalendar(container: HTMLElement, data: any, year: string) {
  const contributions = data.contributions || []
  const totalCount = year === 'last' ? data.total.lastYear : (data.total[year] || 0)
  
  if (contributions.length === 0) {
    container.innerHTML = '<div class="text-sm text-muted-foreground">No contribution data available</div>'
    return
  }
  
  // Group contributions by week
  const weeks = groupByWeeks(contributions)
  const monthLabels = getMonthLabels(weeks)
  
  // Create SVG
  const blockSize = 11
  const blockMargin = 3
  const width = weeks.length * (blockSize + blockMargin) - blockMargin
  const height = 18 + (blockSize + blockMargin) * 7 - blockMargin
  
  const svg = `
    <div class="max-w-full overflow-x-auto" style="scrollbar-gutter: stable;">
      <svg width="${width}" height="${height}" viewBox="0 0 ${width} ${height}" class="block">
        <!-- Month labels -->
        <g>
          ${monthLabels.map(({ label, weekIndex }) => `
            <text x="${(blockSize + blockMargin) * weekIndex}" y="0" 
                  dominant-baseline="hanging" fill="currentColor" font-size="12">
              ${label}
            </text>
          `).join('')}
        </g>
        
        <!-- Activity blocks -->
        ${weeks.map((week, weekIndex) => `
          <g transform="translate(${(blockSize + blockMargin) * weekIndex}, 18)">
            ${week.map((activity, dayIndex) => {
              if (!activity) return ''
              const color = getColor(activity.level)
              return `
                <rect x="0" y="${(blockSize + blockMargin) * dayIndex}" 
                      width="${blockSize}" height="${blockSize}" 
                      rx="2" fill="${color}" 
                      stroke="var(--theme-foreground)" stroke-opacity="0.1"
                      data-date="${activity.date}" data-count="${activity.count}">
                  <title>${activity.date}: ${activity.count} contributions</title>
                </rect>
              `
            }).join('')}
          </g>
        `).join('')}
      </svg>
    </div>
    
    <!-- Footer -->
    <footer class="flex flex-col sm:flex-row sm:justify-between gap-2 text-xs">
      <div>${totalCount} contributions in ${year === 'last' ? 'the last year' : year}</div>
      <div class="flex items-center gap-[3px]">
        <span class="mr-1.5">Less</span>
        ${[0, 1, 2, 3, 4].map(level => `
          <svg width="${blockSize}" height="${blockSize}">
            <rect width="${blockSize}" height="${blockSize}" 
                  fill="${getColor(level)}" rx="2" 
                  stroke="var(--theme-foreground)" stroke-opacity="0.1" />
          </svg>
        `).join('')}
        <span class="ml-1.5">More</span>
      </div>
    </footer>
  `
  
  container.innerHTML = svg
}

function groupByWeeks(contributions: any[]) {
  // Simple week grouping
  const weeks: any[][] = []
  let currentWeek: any[] = []
  
  // Pad the beginning
  const firstDate = new Date(contributions[0].date)
  const startPadding = firstDate.getDay()
  for (let i = 0; i < startPadding; i++) {
    currentWeek.push(null)
  }
  
  // Add contributions
  for (const contribution of contributions) {
    currentWeek.push(contribution)
    if (currentWeek.length === 7) {
      weeks.push(currentWeek)
      currentWeek = []
    }
  }
  
  // Add last week if not empty
  if (currentWeek.length > 0) {
    while (currentWeek.length < 7) {
      currentWeek.push(null)
    }
    weeks.push(currentWeek)
  }
  
  return weeks
}

function getMonthLabels(weeks: any[][]) {
  const monthNames = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']
  const labels: any[] = []
  let lastMonth = -1
  
  weeks.forEach((week, weekIndex) => {
    const firstActivity = week.find(a => a !== null)
    if (firstActivity) {
      const month = new Date(firstActivity.date).getMonth()
      if (month !== lastMonth) {
        labels.push({ weekIndex, label: monthNames[month] })
        lastMonth = month
      }
    }
  })
  
  // Filter labels for spacing
  return labels.filter((label, index, arr) => {
    if (index === 0) return !arr[1] || arr[1].weekIndex - label.weekIndex >= 3
    if (index === arr.length - 1) return weeks.length - label.weekIndex >= 3
    return true
  })
}

function getColor(level: number) {
  const colors = [
    'var(--theme-background)',
    'color-mix(in oklab, var(--theme-accent) 25%, var(--theme-background))',
    'color-mix(in oklab, var(--theme-accent) 50%, var(--theme-background))',
    'color-mix(in oklab, var(--theme-accent) 75%, var(--theme-background))',
    'var(--theme-accent)'
  ]
  return colors[Math.min(level, 4)]
}

// Load calendar when visible
const observer = new IntersectionObserver((entries) => {
  entries.forEach(entry => {
    if (entry.isIntersecting) {
      observer.unobserve(entry.target)
      loadGitHubCalendar(entry.target as HTMLElement)
    }
  })
}, { rootMargin: '100px' })

// Start observing
document.addEventListener('DOMContentLoaded', () => {
  const calendars = document.querySelectorAll('.github-calendar-container')
  calendars.forEach(calendar => observer.observe(calendar))
})
</script>

<style>
  .calendar-skeleton {
    min-height: 180px;
  }
  
  @keyframes pulse {
    0%, 100% { opacity: 0.4; }
    50% { opacity: 0.6; }
  }
  
  .animate-pulse {
    animation: pulse 2s cubic-bezier(0.4, 0, 0.6, 1) infinite;
  }
  
  #github-activity-calendar rect {
    transition: opacity 0.1s ease;
  }
  
  #github-activity-calendar rect:hover {
    opacity: 0.8;
    cursor: pointer;
  }
</style>
