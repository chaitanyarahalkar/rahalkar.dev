---
interface Props {
  username: string
  year?: number
}

const { username, year = 'last' } = Astro.props

// Dimensions for skeleton loader
const skeletonWidth = 828 // Approximate width
const skeletonHeight = 112 // Approximate height
---

<div 
  class="github-calendar-wrapper"
  data-username={username}
  data-year={String(year)}
>
  <!-- Loading skeleton -->
  <div class="calendar-skeleton w-max max-w-full flex flex-col gap-2">
    <div class="skeleton-grid">
      <svg
        width={skeletonWidth}
        height={skeletonHeight}
        viewBox={`0 0 ${skeletonWidth} ${skeletonHeight}`}
        class="animate-pulse"
      >
        <!-- Month labels skeleton -->
        <g>
          {[0, 140, 280, 420, 560, 700].map((x) => (
            <rect
              x={x}
              y={0}
              width={30}
              height={12}
              fill="currentColor"
              opacity={0.1}
              rx={2}
            />
          ))}
        </g>
        <!-- Grid skeleton -->
        <g transform="translate(0, 18)">
          {[...Array(53)].map((_, weekIndex) => (
            <g transform={`translate(${weekIndex * 15}, 0)`}>
              {[...Array(7)].map((_, dayIndex) => (
                <rect
                  x={0}
                  y={dayIndex * 15}
                  width={11}
                  height={11}
                  fill="currentColor"
                  opacity={0.05 + Math.random() * 0.1}
                  rx={2}
                />
              ))}
            </g>
          ))}
        </g>
      </svg>
    </div>
    <div class="skeleton-footer flex justify-between text-xs animate-pulse">
      <div class="h-4 w-48 bg-current opacity-10 rounded"></div>
      <div class="flex gap-1">
        {[...Array(6)].map(() => (
          <div class="h-3 w-3 bg-current opacity-10 rounded"></div>
        ))}
      </div>
    </div>
  </div>
  
  <!-- Actual calendar will be loaded here -->
  <div class="calendar-content hidden"></div>
</div>

<script>
// Intersection Observer for lazy loading
const observerOptions = {
  root: null,
  rootMargin: '100px', // Start loading 100px before visible
  threshold: 0.01
}

const calendarObserver = new IntersectionObserver((entries) => {
  entries.forEach(async (entry) => {
    if (entry.isIntersecting) {
      const wrapper = entry.target as HTMLElement
      const username = wrapper.dataset.username
      const year = wrapper.dataset.year
      
      // Stop observing this element
      calendarObserver.unobserve(wrapper)
      
      try {
        // Dynamically import the optimized calendar component
        const { default: GitHubActivityCalendar } = await import('./GitHubActivityCalendarOptimized.astro')
        
        // For now, we'll use a simpler approach - fetch the HTML from a separate endpoint
        // In production, you might want to create an API endpoint that returns the rendered HTML
        const response = await fetch(`/api/github-calendar?username=${username}&year=${year}`)
        
        if (response.ok) {
          const html = await response.text()
          const contentDiv = wrapper.querySelector('.calendar-content') as HTMLElement
          const skeletonDiv = wrapper.querySelector('.calendar-skeleton') as HTMLElement
          
          if (contentDiv && skeletonDiv) {
            contentDiv.innerHTML = html
            contentDiv.classList.remove('hidden')
            skeletonDiv.classList.add('hidden')
          }
        }
      } catch (error) {
        console.error('Failed to load GitHub calendar:', error)
        // Hide skeleton on error
        const skeletonDiv = wrapper.querySelector('.calendar-skeleton') as HTMLElement
        if (skeletonDiv) {
          skeletonDiv.classList.add('hidden')
        }
      }
    }
  })
}, observerOptions)

// Start observing all calendar wrappers
document.addEventListener('DOMContentLoaded', () => {
  const wrappers = document.querySelectorAll('.github-calendar-wrapper')
  wrappers.forEach(wrapper => {
    calendarObserver.observe(wrapper)
  })
})
</script>

<style>
  .calendar-skeleton {
    min-height: 180px;
  }
  
  @keyframes pulse {
    0%, 100% {
      opacity: 0.4;
    }
    50% {
      opacity: 0.6;
    }
  }
  
  .animate-pulse {
    animation: pulse 2s cubic-bezier(0.4, 0, 0.6, 1) infinite;
  }
</style>
