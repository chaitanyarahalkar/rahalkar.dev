[{"authors":["admin"],"categories":null,"content":"I\u0026rsquo;m a Cybersecurity Engineer in the making and a Tech enthusiast at heart. I love exploring and talking about Computer internals. My passion lies in building things with my power of programming. Check out my noteworthy projects and Open Source contributions on GitHub.\n","date":1631750400,"expirydate":-62135596800,"kind":"taxonomy","lang":"en","lastmod":1631750400,"objectID":"2525497d367e79493fd32b198b28f040","permalink":"https://rahalkar.dev/authors/admin/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/authors/admin/","section":"authors","summary":"I\u0026rsquo;m a Cybersecurity Engineer in the making and a Tech enthusiast at heart. I love exploring and talking about Computer internals. My passion lies in building things with my power of programming. Check out my noteworthy projects and Open Source contributions on GitHub.","tags":null,"title":"Chaitanya Rahalkar","type":"authors"},{"authors":null,"categories":["Cybersecurity","System Security","Binary Exploitation"],"content":" Buffer overflow attacks remain one of the most fundamental yet dangerous vulnerabilities in computer systems. Despite being discovered decades ago, they continue to pose significant threats to modern software. This comprehensive guide delves deep into the technical aspects of buffer overflow attacks, their mechanics, and advanced exploitation techniques.\nUnderstanding Memory Layout Before diving into buffer overflows, it\u0026rsquo;s crucial to understand how program memory is organized:\n Memory Segments:\n Text Segment: Contains executable code (read-only) Data Segment: Initialized global variables BSS Segment: Uninitialized global variables Heap: Dynamic memory allocation Stack: Local variables, function parameters, return addresses  Stack Organization:\nHigh Memory Addresses +------------------------+ | Command line args | | Environment vars | +------------------------+ | Stack | | ↓ Growth | +------------------------+ | ↑ | | Heap Growth | | Heap | +------------------------+ | BSS Segment | +------------------------+ | Data Segment | +------------------------+ | Text Segment | +------------------------+ Low Memory Addresses   Deep Dive into Stack Frames A typical stack frame during function execution:\nStack Frame Layout: +------------------------+ ← High addresses | Function Parameters | +------------------------+ | Return Address | +------------------------+ | Saved Frame Pointer | +------------------------+ | Local Variables | +------------------------+ | Buffer | +------------------------+ ← Low addresses Assembly View: push ebp ; Save old frame pointer mov ebp, esp ; Set up new frame pointer sub esp, X ; Allocate space for locals  Advanced Buffer Overflow Mechanics  Stack-based Buffer Overflow Example:\n#include \u0026lt;string.h\u0026gt; #include \u0026lt;stdio.h\u0026gt; void vulnerable_function(char *user_input) { char buffer[64]; char sensitive_data[] = \u0026quot;SECRET_PASSWORD\u0026quot;; // Vulnerable copy operation strcpy(buffer, user_input); printf(\u0026quot;Buffer contains: %s\\n\u0026quot;, buffer); printf(\u0026quot;Sensitive data: %s\\n\u0026quot;, sensitive_data); } int main(int argc, char **argv) { if (argc \u0026lt; 2) return 1; vulnerable_function(argv[1]); return 0; }  Memory Corruption Analysis:\nBefore Overflow: +------------------------+ | sensitive_data | +------------------------+ | buffer[64] | +------------------------+ | saved EBP | +------------------------+ | return address | +------------------------+ After Overflow: +------------------------+ | sensitive_data | ← Corrupted! +------------------------+ | AAAAAAAA... | ← Buffer overflow +------------------------+ | AAAAAAAA (saved EBP) | ← Corrupted! +------------------------+ | BBBBBBBB (ret addr) | ← Hijacked! +------------------------+   Advanced Exploitation Techniques  Return-to-libc Attack:\n// Bypassing non-executable stack // Stack layout for system(\u0026quot;/bin/sh\u0026quot;) call: [system_addr] // Address of system() in libc [exit_addr] // Address of exit() for clean return [binsh_addr] // Address of \u0026quot;/bin/sh\u0026quot; string  ROP (Return-Oriented Programming) Chains:\n; Example ROP gadgets pop_rdi: pop rdi ret pop_rsi: pop rsi ret ; ROP chain structure [pop_rdi_addr] [arg1] [pop_rsi_addr] [arg2] [function_addr]  Format String Attack Integration:\n// Combining format string with buffer overflow printf(buffer); // Format string vulnerability strcpy(dest, src); // Buffer overflow // Example payload: // %x%x%x%n + [overflow data]   Advanced Protection Mechanisms  ASLR Deep Dive:\n# View ASLR settings cat /proc/sys/kernel/randomize_va_space # Values: # 0 - No randomization # 1 - Conservative randomization # 2 - Full randomization  Stack Canary Implementation:\n// Compiler-generated protection void protected_function() { unsigned long canary = __stack_chk_guard; char buffer[64]; // ... function code ... if (canary != __stack_chk_guard) __stack_chk_fail(); }  Control Flow Integrity (CFI):\n// Example of Microsoft's Control Flow Guard __declspec(guard(cf)) void security_sensitive_function() { // Function protected by CFI }   Advanced Heap Exploitation  Use-After-Free Scenario:\nstruct chunk { size_t prev_size; size_t size; struct chunk *fd; struct chunk *bk; // ... data ... }; // Heap exploitation techniques // 1. Heap Spraying // 2. Heap Feng Shui // 3. Double Free  Heap Memory Layout:\nChunk Header: +------------------------+ | Previous Size | +------------------------+ | Size \u0026amp; Flags | +------------------------+ | Forward Pointer | +------------------------+ | Backward Pointer | +------------------------+ | User Data | +------------------------+   Advanced Mitigation Strategies  Compiler Hardening:\n# GCC security flags gcc -fstack-protector-all \\ -D_FORTIFY_SOURCE=2 \\ -O2 \\ -Wformat \\ -Wformat-security \\ -fPIE -pie \\ -fstack-clash-protection \\ -fcf-protection \\ program.c  Safe Programming Patterns:\n// Length-prefix strings struct safe_string { size_t length; char data[]; }; // Bounds checking wrapper size_t safe_copy(char *dst, size_t dst_size, const char *src, size_t src_size) { size_t to_copy = (dst_size \u0026lt; src_size) ? dst_size : src_size; memcpy(dst, src, to_copy); if (dst_size \u0026gt; 0) dst[dst_size - 1] = '\\0'; return to_copy; }   Real-world Case Studies  Morris Worm (1988):\n Exploited gets() in fingerd First self-replicating malware Affected ~6,000 machines (10% of internet)   Code Red Worm (2001):\n IIS buffer overflow Infected 359,000 hosts in 14 hours Caused $2.6 billion in damage  Slammer Worm (2003):\n SQL Server buffer overflow Infected 75,000 hosts in 10 minutes First \u0026ldquo;Warhol worm\u0026rdquo;   Modern Defense-in-Depth  Runtime Application Self-Protection (RASP):\n// Example RASP implementation @RuntimeProtection public class SecureComponent { @BufferCheck public void processInput(byte[] data) { // Protected processing } }  Memory Safety with Modern Languages:\n// Rust's memory safety fn safe_buffer_handling(input: \u0026amp;[u8]) -\u0026gt; Result\u0026lt;Vec\u0026lt;u8\u0026gt;, Error\u0026gt; { let mut buffer = Vec::with_capacity(64); buffer.extend_from_slice(input.get(0..64) .ok_or(Error::BufferTooLarge)?); Ok(buffer) }   Advanced Debugging and Analysis  GDB Commands for Buffer Overflow Analysis:\n# Set up GDB for exploitation set disassembly-flavor intel set pagination off # Useful commands x/200x $esp # Examine stack info frame # Show stack frame pattern create 200 # Create cyclic pattern pattern offset 0x41414141 # Find offset  Using Dynamic Analysis Tools:\n# Valgrind for memory analysis valgrind --tool=memcheck \\ --leak-check=full \\ --track-origins=yes \\ ./vulnerable_program # AddressSanitizer gcc -fsanitize=address program.c   Conclusion Buffer overflow attacks, while well-understood, continue to evolve and pose significant security risks. Understanding their mechanics from the assembly level up to modern exploitation techniques is crucial for both offensive security researchers and defensive engineers. As protection mechanisms become more sophisticated, new bypass techniques emerge, making this a fascinating and critical area of cybersecurity research.\nThe key to defending against buffer overflows lies in a multi-layered approach: - Secure coding practices - Compiler protections - Runtime mitigations - Regular security audits - Modern programming language adoption\nStay vigilant, as memory corruption vulnerabilities continue to be discovered even in modern software systems.\n","date":1705226400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1705226400,"objectID":"f74400c76c68ba34c9dad3df6bef5bde","permalink":"https://rahalkar.dev/post/understanding-buffer-overflow-attacks/","publishdate":"2024-01-14T10:00:00Z","relpermalink":"/post/understanding-buffer-overflow-attacks/","section":"post","summary":"Buffer overflow attacks remain one of the most fundamental yet dangerous vulnerabilities in computer systems. Despite being discovered decades ago, they continue to pose significant threats to modern software. This comprehensive guide delves deep into the technical aspects of buffer overflow attacks, their mechanics, and advanced exploitation techniques.\nUnderstanding Memory Layout Before diving into buffer overflows, it\u0026rsquo;s crucial to understand how program memory is organized:\n Memory Segments:\n Text Segment: Contains executable code (read-only) Data Segment: Initialized global variables BSS Segment: Uninitialized global variables Heap: Dynamic memory allocation Stack: Local variables, function parameters, return addresses  Stack Organization:","tags":["Buffer Overflow","Memory Exploitation","Cybersecurity","Binary Exploitation","Assembly","x86","Stack Smashing"],"title":"Understanding Buffer Overflow Attacks: A Deep Dive into Memory Exploitation","type":"post"},{"authors":null,"categories":["Cybersecurity","Network Security","Enterprise Security"],"content":" In today\u0026rsquo;s interconnected world, where the traditional network perimeter has all but dissolved, the concept of \u0026ldquo;trust but verify\u0026rdquo; has become dangerously outdated. Enter Zero Trust Architecture (ZTA) - a paradigm shift in security thinking that operates on one fundamental principle: never trust, always verify. Let\u0026rsquo;s dive deep into this revolutionary approach to cybersecurity that\u0026rsquo;s reshaping how organizations protect their digital assets.\nThe Evolution of Network Security Remember the good old days when a strong firewall and VPN were all you needed? Your network was like a medieval castle - hard crunchy exterior, soft chewy interior. Once someone got past the moat (firewall), they had free rein of the castle. But in today\u0026rsquo;s world of cloud services, remote work, and sophisticated attacks, this model is about as effective as a chocolate teapot.\nThe traditional security model was built on some fundamentally flawed assumptions: 1. Internal network traffic can be trusted 2. External threats are the primary concern 3. IP addresses are reliable identifiers 4. Network location equals trust\nRecent breaches have repeatedly shown how these assumptions fail us. Take the infamous SolarWinds hack - attackers didn\u0026rsquo;t break down the castle walls; they poisoned the supply chain and walked right through the front door with valid credentials.\nUnderstanding Zero Trust: The Core Principles Think of Zero Trust like a high-security research facility. Every door requires a new badge scan, every action is logged, and everyone is treated as potentially hostile - even the CEO. Here\u0026rsquo;s how it breaks down:\n Identity is the New Perimeter:\nTraditional Model: User → Firewall → Network → Resources Zero Trust Model: User → Identity Verification → Policy Check → Resource → Continuous Monitoring ↑ ↑ ↑ ↑ MFA/Biometrics Context Analysis Just-in-time Behavior Access Analytics  Microsegmentation: Instead of having one big party room (network), imagine every resource is in its own vault with its own unique access requirements. Even if someone breaks into one vault, they can\u0026rsquo;t access the others.\n Least Privilege Access:\nAccess Level Matrix: +-------------------+-------------+----------------+----------------+ | Role | Data Access | Network Access | Time Window | +-------------------+-------------+----------------+----------------+ | Developer | Dev DB Only | Dev Subnet | Working Hours | | SRE | Logs, Metrics| All Subnets | 24/7 | | Security Analyst | Audit Logs | Security Tools | 24/7 | | HR Staff | HR DB Only | HR Subnet | Working Hours | +-------------------+-------------+----------------+----------------+   Technical Implementation Deep Dive Let\u0026rsquo;s get our hands dirty with the technical stuff. Here\u0026rsquo;s what a Zero Trust implementation typically looks like:\n Identity and Access Management (IAM):\n{ \u0026quot;access_policy\u0026quot;: { \u0026quot;user\u0026quot;: \u0026quot;engineer_jane\u0026quot;, \u0026quot;resource\u0026quot;: \u0026quot;prod_database\u0026quot;, \u0026quot;conditions\u0026quot;: { \u0026quot;device_trust_level\u0026quot;: \u0026quot;high\u0026quot;, \u0026quot;location\u0026quot;: [\u0026quot;office\u0026quot;, \u0026quot;approved_home\u0026quot;], \u0026quot;time_window\u0026quot;: \u0026quot;working_hours\u0026quot;, \u0026quot;risk_score\u0026quot;: \u0026quot;\u0026lt;3\u0026quot;, \u0026quot;mfa_status\u0026quot;: \u0026quot;verified\u0026quot;, \u0026quot;device_compliance\u0026quot;: { \u0026quot;os_version\u0026quot;: \u0026quot;\u0026gt;=10.15\u0026quot;, \u0026quot;firewall\u0026quot;: \u0026quot;enabled\u0026quot;, \u0026quot;disk_encryption\u0026quot;: \u0026quot;enabled\u0026quot;, \u0026quot;security_agent\u0026quot;: \u0026quot;running\u0026quot; } }, \u0026quot;permissions\u0026quot;: [\u0026quot;read\u0026quot;, \u0026quot;write\u0026quot;], \u0026quot;session_duration\u0026quot;: \u0026quot;8h\u0026quot;, \u0026quot;audit_level\u0026quot;: \u0026quot;high\u0026quot; } }  Network Segmentation Implementation:\n# Example Kubernetes Network Policy apiVersion: networking.k8s.io/v1 kind: NetworkPolicy metadata: name: api-isolation spec: podSelector: matchLabels: app: api-service policyTypes: - Ingress - Egress ingress: - from: - podSelector: matchLabels: role: frontend ports: - protocol: TCP port: 443 egress: - to: - podSelector: matchLabels: role: database ports: - protocol: TCP port: 5432  Authentication Flow:\nclass ZeroTrustAuthenticator: def authenticate_request(self, request, resource): # 1. Verify identity user = self.verify_identity(request.credentials) if not user: return AuthResult(success=False, reason=\u0026quot;Invalid credentials\u0026quot;) # 2. Check device health device = self.check_device_health(request.device_info) if not device.compliant: return AuthResult(success=False, reason=\u0026quot;Device not compliant\u0026quot;) # 3. Evaluate context context = self.evaluate_context(user, device, resource) if context.risk_score \u0026gt; THRESHOLD: return AuthResult(success=False, reason=\u0026quot;High risk score\u0026quot;) # 4. Apply policy policy_result = self.policy_engine.evaluate( user, device, resource, context ) if not policy_result.allowed: return AuthResult(success=False, reason=policy_result.reason) # 5. Generate limited-time access token token = self.token_service.generate( user=user, resource=resource, permissions=policy_result.permissions, expiry=datetime.now() + timedelta(hours=8) ) return AuthResult(success=True, token=token)   Real-world Implementation Challenges Let\u0026rsquo;s be real - implementing Zero Trust isn\u0026rsquo;t all sunshine and rainbows. Here are some war stories and solutions:\n Legacy System Integration Remember that ancient COBOL system that\u0026rsquo;s still running your core business logic? Yeah, it wasn\u0026rsquo;t built with Zero Trust in mind. Here\u0026rsquo;s how to handle it:\nclass LegacySystemProxy: def __init__(self, legacy_system): self.legacy = legacy_system self.auth_service = ModernAuthService() self.encryption = ModernEncryption() def handle_request(self, request): # 1. Modern authentication if not self.auth_service.verify(request): raise SecurityException(\u0026quot;Authentication failed\u0026quot;) # 2. Encrypt communication encrypted_data = self.encryption.encrypt(request.data) # 3. Forward to legacy system response = self.legacy.process(encrypted_data) # 4. Audit logging self.audit_logger.log(request, response) return response  Performance Impact With every access requiring verification, your systems might feel like they\u0026rsquo;re running through molasses. The fix? Implement smart caching and token-based verification:\nclass PerformanceOptimizedVerifier: def __init__(self): self.cache = TTLCache(maxsize=1000, ttl=300) # 5-minute TTL def verify_access(self, token, resource): cache_key = f\u0026quot;{token}:{resource}\u0026quot; # Try cache first if cache_key in self.cache: return self.cache[cache_key] # Full verification if cache miss result = self.full_verify(token, resource) # Cache the result self.cache[cache_key] = result return result def full_verify(self, token, resource): # Expensive verification logic here pass   Advanced Security Controls  Continuous Monitoring and Analytics:\nclass SecurityAnalytics: def analyze_access_pattern(self, user_id, resource_id): # Collect metrics access_count = self.get_access_count(user_id, window='1h') typical_pattern = self.get_typical_pattern(user_id) location_changes = self.get_location_changes(user_id) # Calculate risk score risk_score = 0 risk_score += self.evaluate_frequency(access_count) risk_score += self.evaluate_pattern(typical_pattern) risk_score += self.evaluate_location(location_changes) return { 'risk_score': risk_score, 'metrics': { 'access_frequency': access_count, 'pattern_deviation': typical_pattern.deviation, 'location_changes': len(location_changes) } }  Risk-based Authentication Flow:\ngraph TD A[Request] --\u0026gt; B{Check Identity} B --\u0026gt;|Valid| C{Check Device} B --\u0026gt;|Invalid| X[Deny] C --\u0026gt;|Compliant| D{Check Context} C --\u0026gt;|Non-compliant| X D --\u0026gt;|Low Risk| E[Grant Access] D --\u0026gt;|Medium Risk| F[Request Additional Auth] D --\u0026gt;|High Risk| X   Implementing Zero Trust in the Cloud Cloud environments present unique challenges and opportunities for Zero Trust:\n AWS Implementation:\n# Example AWS Security Group for Zero Trust resource \u0026quot;aws_security_group\u0026quot; \u0026quot;zero_trust_sg\u0026quot; { name = \u0026quot;zero-trust-sg\u0026quot; description = \u0026quot;Zero Trust security group\u0026quot; vpc_id = aws_vpc.main.id # No ingress rules by default # All access must be explicitly granted egress { from_port = 0 to_port = 0 protocol = \u0026quot;-1\u0026quot; cidr_blocks = [\u0026quot;0.0.0.0/0\u0026quot;] } tags = { Name = \u0026quot;zero-trust-sg\u0026quot; } } # IAM Role with fine-grained permissions resource \u0026quot;aws_iam_role\u0026quot; \u0026quot;app_role\u0026quot; { name = \u0026quot;app-role\u0026quot; assume_role_policy = jsonencode({ Version = \u0026quot;2012-10-17\u0026quot; Statement = [ { Action = \u0026quot;sts:AssumeRole\u0026quot; Effect = \u0026quot;Allow\u0026quot; Principal = { Service = \u0026quot;ec2.amazonaws.com\u0026quot; } } ] }) }  Kubernetes Implementation:\n# Service Mesh Configuration (Istio) apiVersion: security.istio.io/v1beta1 kind: AuthorizationPolicy metadata: name: frontend-ingress namespace: default spec: selector: matchLabels: app: frontend rules: - from: - source: principals: [\u0026quot;cluster.local/ns/default/sa/gateway-service\u0026quot;] to: - operation: methods: [\u0026quot;GET\u0026quot;] paths: [\u0026quot;/api/v1/*\u0026quot;] - from: - source: principals: [\u0026quot;cluster.local/ns/default/sa/monitoring\u0026quot;] to: - operation: methods: [\u0026quot;GET\u0026quot;] paths: [\u0026quot;/metrics\u0026quot;]   Future of Zero Trust As we peer into our crystal ball, we see Zero Trust evolving with:\n AI-driven Security:\nclass AISecurityAnalyzer: def analyze_behavior(self, user_activity): # Load trained model model = self.load_model('behavior_analysis') # Extract features features = self.extract_features(user_activity) # Predict risk score risk_score = model.predict(features) # Explain prediction explanation = self.explain_prediction(model, features) return { 'risk_score': risk_score, 'explanation': explanation, 'confidence': model.confidence }  Quantum-resistant Cryptography:\nfrom cryptography.hazmat.primitives import hashes from cryptography.hazmat.primitives.asymmetric import padding class QuantumResistantCrypto: def generate_keys(self): # Use quantum-resistant algorithms private_key = dilithium.generate_private_key() public_key = private_key.public_key() return private_key, public_key def sign_message(self, message, private_key): signature = private_key.sign( message, padding.PSS( mgf=padding.MGF1(hashes.SHA3_256()), salt_length=padding.PSS.MAX_LENGTH ), hashes.SHA3_256() ) return signature   Practical Tips for Implementation  Start small - don\u0026rsquo;t try to boil the ocean:\nImplementation Phases: Phase 1: Critical APIs ├── Identity Management ├── MFA Implementation └── Basic Monitoring Phase 2: Internal Applications ├── Application Segmentation ├── Policy Engine └── Advanced Monitoring Phase 3: Legacy Systems ├── Proxy Implementation ├── Protocol Translation └── Security Wrapper Phase 4: IoT Devices ├── Device Identity ├── Network Isolation └── Continuous Monitoring  Focus on quick wins:\n Enable MFA everywhere Implement device health checks Start logging everything Deploy network segmentation Implement just-in-time access   Measuring Success How do you know if your Zero Trust implementation is effective? Here are key metrics to track:\nclass ZeroTrustMetrics: def calculate_metrics(self): return { 'security_posture': { 'unauthorized_access_attempts': self.count_unauthorized(), 'policy_violations': self.count_violations(), 'average_risk_score': self.avg_risk_score() }, 'operational_impact': { 'authentication_latency': self.auth_latency(), 'resource_access_time': self.access_time(), 'false_positive_rate': self.false_positive_rate() }, 'compliance': { 'policy_coverage': self.policy_coverage(), 'audit_compliance': self.audit_compliance(), 'incident_response_time': self.response_time() } }  Conclusion Zero Trust Architecture isn\u0026rsquo;t just another security buzzword - it\u0026rsquo;s a fundamental rethinking of how we approach security in a world where the perimeter is wherever your data is. By adopting these principles, organizations can better protect themselves against modern threats while enabling the flexibility needed in today\u0026rsquo;s digital landscape.\nThe journey to Zero Trust is continuous, requiring constant evaluation and adjustment. But with careful planning, phased implementation, and a focus on both security and user experience, organizations can successfully make the transition.\nWhat\u0026rsquo;s your take on Zero Trust? Have you implemented it in your organization? Let\u0026rsquo;s discuss in the comments below!\n","date":1673604000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1673604000,"objectID":"128747da45506dd24d8af1f9580995ed","permalink":"https://rahalkar.dev/post/implementing-zero-trust-architecture/","publishdate":"2023-01-13T10:00:00Z","relpermalink":"/post/implementing-zero-trust-architecture/","section":"post","summary":"In today\u0026rsquo;s interconnected world, where the traditional network perimeter has all but dissolved, the concept of \u0026ldquo;trust but verify\u0026rdquo; has become dangerously outdated. Enter Zero Trust Architecture (ZTA) - a paradigm shift in security thinking that operates on one fundamental principle: never trust, always verify. Let\u0026rsquo;s dive deep into this revolutionary approach to cybersecurity that\u0026rsquo;s reshaping how organizations protect their digital assets.\nThe Evolution of Network Security Remember the good old days when a strong firewall and VPN were all you needed?","tags":["Zero Trust","Network Security","Identity Management","Access Control","Cloud Security","Microsegmentation","Security Architecture"],"title":"Zero Trust Architecture: Beyond the Perimeter Security Model","type":"post"},{"authors":["Chaitanya Rahalkar"],"categories":null,"content":"This is a summary of the \u0026ldquo;Centralized or Decentralized? The Contact Tracing Dilemma\u0026rdquo; research paper having the following abstract - \u0026ldquo;The COVID-19 pandemic created a noticeable challenge to the cryptographic community with the development of contact tracing applications. The media reported a dispute between designers proposing a centralized or a decentralized solution (namely, the PEPP-PT and the DP3T projects). Perhaps, the time constraints to develop and deploy efficient solutions led to non-optimal (in terms of privacy) solutions. Moreover, arguments have been severely biased and the scientific debate did not really happen until recently. In this paper, we show the vulnerabilities and the advantages of both solutions systematically. We believe that none offers any sufficient level of privacy protection and the decision to use one or another is as hard as using automated contact tracing at the first place. A third way could be explored. We list here a few possible directions.\u0026rdquo;\nGet a copy of the talk slides here\n","date":1648378800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1648378800,"objectID":"3ad9b7fce9804f572c9054a34ad97348","permalink":"https://rahalkar.dev/talk/centralized-vs-decentralized/","publishdate":"2022-03-27T11:00:00Z","relpermalink":"/talk/centralized-vs-decentralized/","section":"talk","summary":"This is a summary of the \"Centralized or Decentralized? The Contact Tracing Dilemma\" research paper having the following abstract - \"The COVID-19 pandemic created a noticeable challenge to the cryptographic community with the development of contact tracing applications. The media reported a dispute between designers proposing a centralized or a decentralized solution (namely, the PEPP-PT and the DP3T projects). Perhaps, the time constraints to develop and deploy efficient solutions led to non-optimal (in terms of privacy) solutions. Moreover, arguments have been severely biased and the scientific debate did not really happen until recently. In this paper, we show the vulnerabilities and the advantages of both solutions systematically. We believe that none offers any sufficient level of privacy protection and the decision to use one or another is as hard as using automated contact tracing at the first place. A third way could be explored. We list here a few possible directions.\"","tags":["cryptography","contact-tracing"],"title":"Centralized or Decentralized? The Contact Tracing Dilemma","type":"talk"},{"authors":["Chaitanya Rahalkar","Nathan Lee Jaco"],"categories":null,"content":"A talk about the Zero-Day exploit used by the NSO group on Ahmed Mansoor, its backstory, exploit and network infrastructure. Get a copy of the slides here!\n","date":1635505200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1635505200,"objectID":"33d9d3171e58b730b2ea8f518cf939a2","permalink":"https://rahalkar.dev/talk/million-dollar-dissident/","publishdate":"2021-10-29T11:00:00Z","relpermalink":"/talk/million-dollar-dissident/","section":"talk","summary":"A talk about the Zero-Day exploit used by the NSO group on Ahmed Mansoor, its backstory, exploit and network infrastructure.","tags":["security","hacking"],"title":"The Million Dollar Dissident","type":"talk"},{"authors":["Chaitanya Rahalkar","Anushka Virgaonkar"],"categories":null,"content":"","date":1631750400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1631750400,"objectID":"83c405f3692b0522bd6af7316c8ff438","permalink":"https://rahalkar.dev/publication/sum-crypt/","publishdate":"2019-09-09T00:00:00Z","relpermalink":"/publication/sum-crypt/","section":"publication","summary":"We summarize the privacy preserving techniques used in Cryptocurrencies and compare them to Bitcoin.","tags":["research","arxiv","cryptocurrencies"],"title":"Summarizing and Analyzing the Privacy-Preserving Techniques in Bitcoin and other Cryptocurrencies","type":"publication"},{"authors":["Chaitanya Rahalkar","Anushka Virgaonkar"],"categories":null,"content":"Bitcoin and many other similar Cryptocurrencies have been in existence for over a decade, prominently focusing on decentralized, pseudo-anonymous ledger-based transactions. Many protocol improvements and changes have resulted in new variants of Cryptocurrencies that are known for their peculiar characteristics. For instance, Storjcoin is a Proof-of-Storage-based Cryptocurrency that incentivizes its peers based on the amount of storage owned by them. Cryptocurrencies like Monero strive for user privacy by using privacy-centric cryptographic algorithms. While Cryptocurrencies strive to maintain peer transparency by making the transactions and the entire ledger public, user privacy is compromised at times. Monero and many other privacy-centric Cryptocurrencies have significantly improved from the original Bitcoin protocol after several problems were found in the protocol. Most of these deficiencies were related to the privacy of users. Even though Bitcoin claims to have pseudo-anonymous user identities, many attacks have managed to successfully de-anonymize users. In this paper, we present some well-known attacks and analysis techniques that have compromised the privacy of Bitcoin and many other similar Cryptocurrencies. We also analyze and study different privacy-preserving algorithms and the problems these algorithms manage to solve. Lastly, we touch upon the ethics, impact, legality, and acceptance of imposing these privacy algorithms. Get a copy of the slides here!\n","date":1619348400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1619348400,"objectID":"5952ea4b6627b83daa54763076d65e55","permalink":"https://rahalkar.dev/talk/privacy-blockchain/","publishdate":"2021-04-25T11:00:00Z","relpermalink":"/talk/privacy-blockchain/","section":"talk","summary":"Bitcoin and many other similar Cryptocurrencies have been in existence for over a decade, prominently focusing on decentralized, pseudo-anonymous ledger-based transactions. Many protocol improvements and changes have resulted in new variants of Cryptocurrencies that are known for their peculiar characteristics. For instance, Storjcoin is a Proof-of-Storage-based Cryptocurrency that incentivizes its peers based on the amount of storage owned by them. Cryptocurrencies like Monero strive for user privacy by using privacy-centric cryptographic algorithms.  While Cryptocurrencies strive to maintain peer transparency by making the transactions and the entire ledger public, user privacy is compromised at times. Monero and many other privacy-centric Cryptocurrencies have significantly improved from the original Bitcoin protocol after several problems were found in the protocol. Most of these deficiencies were related to the privacy of users. Even though Bitcoin claims to have pseudo-anonymous user identities, many attacks have managed to successfully de-anonymize users. In this paper, we present some well-known attacks and analysis techniques that have compromised the privacy of Bitcoin and many other similar Cryptocurrencies. We also analyze and study different privacy-preserving algorithms and the problems these algorithms manage to solve. Lastly, we touch upon the ethics, impact, legality, and acceptance of imposing these privacy algorithms.","tags":["blockchain","privacy"],"title":"Summarizing and Analyzing the Privacy-Preserving Techniques in Bitcoin and other Cryptocurrencies","type":"talk"},{"authors":["Chaitanya Rahalkar","Anushka Virgaonkar"],"categories":null,"content":"Secure, reliable, and fast transfer of files across the Internet is a problem attempted to be solved through many application-layer protocols. In this paper, we aim to design a secure, reliable, open-design, and performant file transfer protocol that is inspired by the WebRTC protocol stack. Traditionally, transferring files involves a publicly exposed (available on the public network) third-party server that serves the uploaded files to the receiver. Here, the third-party server has to bear the storage and bandwidth cost to transfer the files between the two parties. We propose a protocol that uses a relay server to relay the files from the client to the server. A relay server has several advantages over a regular file-hosting server. Firstly, a relay server does not retain the uploaded files, it simply relays them. Secondly, a relay server has a full-duplex communication channel and therefore the receiver is not required to wait for the sender to upload the files completely. In this paper, we study available file transfer approaches and their known flaws. We propose our idea and compare our stack with WebRTC. Finally, we perform empirical analysis and, benchmark our device-to-device transfer approach along with other available options including WebRTC. Get a copy of the slides here!\n","date":1619262000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1619262000,"objectID":"62cfcba9d4e9e3dfdcb59922b0fd8b3b","permalink":"https://rahalkar.dev/talk/container-best-practices/","publishdate":"2021-04-24T11:00:00Z","relpermalink":"/talk/container-best-practices/","section":"talk","summary":"Secure, reliable, and fast transfer of files across the Internet is a problem attempted to be solved through many application-layer protocols. In this paper, we aim to design a secure, reliable, open-design, and performant file transfer protocol that is inspired by the WebRTC protocol stack. Traditionally, transferring files involves a publicly exposed (available on the public network) third-party server that serves the uploaded files to the receiver. Here, the third-party server has to bear the storage and bandwidth cost to transfer the files between the two parties. We propose a protocol that uses a relay server to relay the files from the client to the server. A relay server has several advantages over a regular file-hosting server. Firstly, a relay server does not retain the uploaded files, it simply relays them. Secondly, a relay server has a full-duplex communication channel and therefore the receiver is not required to wait for the sender to upload the files completely. In this paper, we study available file transfer approaches and their known flaws. We propose our idea and compare our stack with WebRTC. Finally, we perform empirical analysis and, benchmark our device-to-device transfer approach along with other available options including WebRTC.","tags":["file-transfer","p2p"],"title":"Designing a Secure Device-to-Device File Transfer Mechanism","type":"talk"},{"authors":["Chaitanya Rahalkar","Anushka Virgaonkar"],"categories":null,"content":"Secure, reliable, and fast transfer of files across the Internet is a problem attempted to be solved through many application-layer protocols. In this paper, we aim to design a secure, reliable, open-design, and performant file transfer protocol that is inspired by the WebRTC protocol stack. Traditionally, transferring files involves a publicly exposed (available on the public network) third-party server that serves the uploaded files to the receiver. Here, the third-party server has to bear the storage and bandwidth cost to transfer the files between the two parties. We propose a protocol that uses a relay server to relay the files from the client to the server. A relay server has several advantages over a regular file-hosting server. Firstly, a relay server does not retain the uploaded files, it simply relays them. Secondly, a relay server has a full-duplex communication channel and therefore the receiver is not required to wait for the sender to upload the files completely. In this paper, we study available file transfer approaches and their known flaws. We propose our idea and compare our stack with WebRTC. Finally, we perform empirical analysis and, benchmark our device-to-device transfer approach along with other available options including WebRTC. Get a copy of the slides here!\n","date":1619262000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1619262000,"objectID":"4dea0eceddafb63fd3219c1126bc2450","permalink":"https://rahalkar.dev/talk/secure-p2p-file-transfer/","publishdate":"2021-04-24T11:00:00Z","relpermalink":"/talk/secure-p2p-file-transfer/","section":"talk","summary":"Secure, reliable, and fast transfer of files across the Internet is a problem attempted to be solved through many application-layer protocols. In this paper, we aim to design a secure, reliable, open-design, and performant file transfer protocol that is inspired by the WebRTC protocol stack. Traditionally, transferring files involves a publicly exposed (available on the public network) third-party server that serves the uploaded files to the receiver. Here, the third-party server has to bear the storage and bandwidth cost to transfer the files between the two parties. We propose a protocol that uses a relay server to relay the files from the client to the server. A relay server has several advantages over a regular file-hosting server. Firstly, a relay server does not retain the uploaded files, it simply relays them. Secondly, a relay server has a full-duplex communication channel and therefore the receiver is not required to wait for the sender to upload the files completely. In this paper, we study available file transfer approaches and their known flaws. We propose our idea and compare our stack with WebRTC. Finally, we perform empirical analysis and, benchmark our device-to-device transfer approach along with other available options including WebRTC.","tags":["file-transfer","p2p"],"title":"Designing a Secure Device-to-Device File Transfer Mechanism","type":"talk"},{"authors":["Chaitanya Rahalkar","Anushka Virgaonkar","Dhaval Gujar","Sumedh Patkar"],"categories":null,"content":"","date":1586995200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1586995200,"objectID":"fe3f511cf1072dae2c6783d424291e8f","permalink":"https://rahalkar.dev/publication/e2e-dl/","publishdate":"2020-04-16T00:00:00Z","relpermalink":"/publication/e2e-dl/","section":"publication","summary":"We propose a new way of creating a unified interface for radiologists \u0026 researchers to analyze CT scans and support the system with XAI.","tags":["Health Care","Deep Learning","Explainable AI"],"title":"End-to-End Lung Cancer Diagnosis on Computed Tomography Scans using 3D CNN and Explainable AI","type":"publication"},{"authors":["Chaitanya Rahalkar","Dhaval Gujar"],"categories":null,"content":"","date":1576108800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1576108800,"objectID":"a6b6aa28b351da9c285880980a5644c5","permalink":"https://rahalkar.dev/publication/ca-fs/","publishdate":"2019-11-11T00:00:00Z","relpermalink":"/publication/ca-fs/","section":"publication","summary":"We propose a new content addressed peer-to-peer file system as a replacement to the bloated HTTP protocol assisted with the robust preservation properties of Blockchain.","tags":["blockchain","IEEE","file system"],"title":"Content Addressed Peer-to-Peer File System for the Web with Blockchain-based Metadata Integrity","type":"publication"},{"authors":["Rajvardhan Oak","Chaitanya Rahalkar","Dhaval Gujar"],"categories":null,"content":"","date":1573430400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1573430400,"objectID":"b28dff4f1bfc0b5efea6205ee577e0ae","permalink":"https://rahalkar.dev/publication/gan-ccs/","publishdate":"2019-11-11T00:00:00Z","relpermalink":"/publication/gan-ccs/","section":"publication","summary":"We propose a new way of generating pseudorandom numbers using generative adversarial networks. We demonstrate that a GAN can act as a Cryptographically Secure Pseudorandom Number Generator (CPRNG) passing 97% of National Institute of Standards and Technology (NIST) tests.","tags":["research","ACM","security"],"title":"Using Generative Adversarial Networks for Secure Pseudorandom Number Generation","type":"publication"},{"authors":["Chaitanya Rahalkar","Anushka Virgaonkar"],"categories":null,"content":"Python has a large number of really cool modules that people don\u0026rsquo;t know about. These are quite helpful. People often tend to program the hard way since they don\u0026rsquo;t know about the existence of these modules. Such examples can be the itertools module, the secrets module to generate secure random numbers etc. Get a copy of the talk slides here\n","date":1569668400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1569668400,"objectID":"ef68298535e7252246268a7fad063a82","permalink":"https://rahalkar.dev/talk/python-pune-sept/","publishdate":"2019-09-28T11:00:00Z","relpermalink":"/talk/python-pune-sept/","section":"talk","summary":"Python has a large number of really cool modules that people don't know about. These are quite helpful. People often tend to program the hard way since they don't know about the existence of these modules. Such examples can be the itertools module, the secrets module to generate secure random numbers etc.","tags":["python","hidden secrets"],"title":"Hidden Secrets of Python","type":"talk"},{"authors":["Chaitanya Rahalkar"],"categories":null,"content":"Zip Slip was a vulnerability found in the file extraction mechanism employed in programming languages. It was discovered and responsibly disclosed by the Snyk Security team ahead of a public disclosure on 5th June 2018, and affected thousands of projects, including ones from HP, Amazon, Apache, Pivotal. The vulnerability is prevalent in Java, where there is no central library offering high level processing of archives. It was also observed in Go \u0026amp; Python. Zip slip caused havoc on its public disclosure. Zip Slip allowed for remote code execution, thereby granting shell privileges to an adversary. The vulnerability can affect other formats like tar, jar, war,cpio,apk,rar etc.\nConsider a zip file (foo.zip) with two files bundled in it - foo.text and bar.text\nchaitanya@zipslip$ zip -sf foo.zip Archive contains: foo.text bar.text Total 2 entries (100 bytes)  The -sf flag scans for files and lists the contents of the archive. However, if a maliciously crafted file is bundled in the zip, and if it is improperly handled during extraction then it may lead to severe problem like remote code execution.\nConsider a zip file (malicious.zip) with two files (one is the RCE shell script and the other is an ordinary text file)\nchaitanya@zipslip$ zip -sf malicious.zip Archive contains: foo.text ../../../../../../../../../tmp/rce.sh Total 2 entries (560 bytes)  As soon as this zip is extracted, foo.text would be extracted within the same folder as of the zip file. However, rce.sh would be extracted to the tmp folder. The ../../ part before the file name ensures that the file path eventually hits / if it is within a subdirectory of high depth, and then stores the rce.sh file to the tmp folder. Now, a simple mechanism to execute this shell script would lead to remote code execution. This can overwrite configuration files on the system as well. Usually web applications that deal with zip file uploads rely on the file handling APIs native to a programming language.\nConsider this Java code snippet,\n1 Enumeration\u0026lt;ZipEntry\u0026gt; entries = zip.getEntries(); 2 while (entries.hasMoreElements()) { 3 ZipEntry e = entries.nextElement(); 4 File f = new File(destinationDir, e.getName()); 5 InputStream input = zip.getInputStream(e); 6 IOUtils.copy(input, write(f)); 7 }  On line 4, e.getName() is concatenated with the target directory, dir, without being validated. At this point, when the zip archive gets to rce.sh, it will append the full path (including every ../) of the zip entry to the target directory resulting in rce.sh being written outside of the target directory.\n","date":1568973600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1571270400,"objectID":"425a080f1ba9b10592c0a3017f2334db","permalink":"https://rahalkar.dev/post/zip-slip/","publishdate":"2019-09-20T10:00:00Z","relpermalink":"/post/zip-slip/","section":"post","summary":"Know about the Zip Slip vulnerability.","tags":["security","vulnerability","exploit"],"title":"What is Zip Slip?","type":"post"},{"authors":null,"categories":null,"content":"","date":1568764800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1568764800,"objectID":"77ab6cf867426c57539be17a6a8026e1","permalink":"https://rahalkar.dev/project/cedit/","publishdate":"2019-09-18T00:00:00Z","relpermalink":"/project/cedit/","section":"project","summary":"A minimalistic text editor for terminal fanatics.","tags":["Demo"],"title":"Cedit","type":"project"},{"authors":null,"categories":null,"content":"","date":1568764800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1568764800,"objectID":"83b783bc4fb2420a460a02fa0a5cff51","permalink":"https://rahalkar.dev/project/cyberfort/","publishdate":"2019-09-18T00:00:00Z","relpermalink":"/project/cyberfort/","section":"project","summary":"Cyberfort CTF is an online platform to test and advance skills in Penetration Testing and Cybersecurity.","tags":["CTF"],"title":"Cyberfort CTF","type":"project"},{"authors":null,"categories":["Hacking","Linux"],"content":" Dirty COW is a computer security vulnerability that was discovered in the Linux Kernel in 2016. The exploit was registered under CVE with the designation: CVE-2016-5195. Dirty COW is a root privilege escalation exploit that attacks the Copy-On-Write mechanism in the Linux Kernel. Hence the \u0026ldquo;COW\u0026rdquo; in Dirty COW. The proof of concept can be found here.\nThe vulnerability existed in the Linux Kernel since 2007, but was discovered later in 2016, by Phil Oester. It has been patched in Linux kernel versions 4.8.3, 4.7.9, 4.4.26 and newer. The exploit also attacked Android devices. It allows a user to write to a read-only root file and escalate privileges.\nWhat is Copy-On-Write Mechanism? Linux kernel has a mechanism that when a process requests a copy of some file, the kernel does not create a copy of the file until the file is requested to be written to. Copy-On-Write Mechanism works in two steps:\n Locate/generate a physical address in the memory.\n Write to the copy only when the file is requested to be written to.\n  COW is basically an optimization strategy used by the Linux kernel. The COW concept is also used in maintenance of instant snapshot on database servers like Microsoft SQL Server 2005. Instant snapshots preserve a static view of a database by storing a pre-modification copy of data when underlaying data are updated. Instant snapshots are used for testing uses or moment-dependent reports and should not be used to replace backups.\nHow Dirty COW exploits the Copy-On-Write Mechanism? The exploit creates a private copy(mapping) of a read-only file(which is the file owned by root). Now it tries to write to the private copy. Now the COW mechanism comes into picture. Since the file is never requested to be written to, and now it is - COW does it job.\nThe write action in COW has the two operations as explained above. These operations are non-atomic in nature. We say that an operation is atomic when it has only two states- Either the operation is complete or it is not. The atomic operation completes in a single step and no other process/thread can access the data owned by that operation. Non-atomic operations can have intermediate stages as well, which includes partial execution of the instruction \u0026amp; they can have shared memory accessible by multiple threads or processes at the same time. Since these operations are non-atomic, another thread can get right in the middle of the two operations (locate physical address \u0026amp; write to physical address)\nIn the Dirty COW exploit, initially a private mmap (memory map of the read-only file in the main memory) is created. As per the Linux man page: Mmap is a system call used to allocate memory, or map files or devices into memory). The reason to create a private mmap is that, the system makes all the write changes to the private mapping without affecting the original file.\nDirty COW uses two threads- The first thread does not directly write to the actual memory allocated by the mmap, but it writes to /proc/self/mem. This path is the virtual representation of the exploit executable that is running. The reason to write to this location is because the vulnerability resides in the process-to-process virtual memory access. In short, the thread requests the kernel to write to the private mapping that was initially created with mmap. Thus COW is coming into picture now. The other thread executes the madvise system call. As per the Linux man page: the madvise() system call allows a process that has knowledge of its memory behavior to describe it to the system. The advice passed in may be used by the system to alter its virtual memory paging strategy. This thread says to the kernel (\u0026rdquo;advices\u0026rdquo;) that the private mapping that was created initially, is not required anymore and thus should be thrown away.\nThe two threads are running concurrently, and thus in the context switching mechanism, a scenario will occur as shown below :\nThread 1 Thread 2  Locate physical address     Throw away private copy   Write to physical address      Thus the second thread has successfully managed to get in between the two non atomic operations. Thus before writing to the physical address, the mmap is discarded. Now since it does not have any address to write to, it writes to the original read-only file. Thus, the kernel is tricked into thinking that the write was to the original read-only file. This is a race condition exhibited due to write attempts at a location that never exists. And this is how the actual exploit works.\nThe following diagram taken from here gives an apt visual representation of the exploit. How does Dirty COW gets root privileges? Since the exploit is now able to write to read-only files, the /etc/sudoers file can be written to. This will add the current user to the sudoers list, thereby escalating privileges. Even the /etc/shadow file can be manipulated to change the root password. Several versions of the exploit were implemented attacking SUID binaries, writing to read-only files. Another version of the exploit existed, which used an alternative method to exploit the process-to-process virtual memory access (with ptrace).\nImplementation Details The below code snippet gives a general idea of how the exploit was implemented in C. Most of the functions used here are a part of the Linux Kernel API and hence the necessary headers are required to be included. This snippet just gives a brief overview of the programming part of the exploit.\npthread_t pth1,pth2; // The two threads are created f = open(\u0026quot;read-only-file\u0026quot;,O_RDONLY); // Open the read-only file void* map = mmap(void *addr, size_t len, int prot, int flags, int fd, off_t offset); // Memory map is created pthread_create(pth1,NULL,madviseThread); // Calling thread 1 pthread_create(pth2,NULL,writeToProcSelfMem,\u0026quot;read-only-file\u0026quot;); // Calling thread 2 void *madviseThread() { int i,c=0; for(i=0;i\u0026lt;100000000;i++) { c += madvise(map,100,MADV_DONTNEED); // Using madvise and telling the kernel that the allocated space is no longer needed } } void *writeToProcSelfMem(void *arg) { char *str; str = (char*)arg; int f = open(\u0026quot;/proc/self/mem\u0026quot;,O_RDWR); // Opening /proc/self/mem in read-write mode int i,c = 0; for(i=0;i\u0026lt;100000000;i++) { lseek(f,(uintptr_t) map,SEEK_SET); c += write(f,str,strlen(str)); // Write to /proc/self/mem the contents of str } } \u0026lt;/code\u0026gt;  ","date":1568607302,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1568607302,"objectID":"9933b53afa1ea914573a34af574df76e","permalink":"https://rahalkar.dev/post/understanding-dirty-cow-the-infamous-linux-kernel-exploit/","publishdate":"2019-09-16T04:15:02Z","relpermalink":"/post/understanding-dirty-cow-the-infamous-linux-kernel-exploit/","section":"post","summary":"Dirty COW is a computer security vulnerability that was discovered in the Linux Kernel in 2016. The exploit was registered under CVE with the designation: CVE-2016-5195. Dirty COW is a root privilege escalation exploit that attacks the Copy-On-Write mechanism in the Linux Kernel. Hence the \u0026ldquo;COW\u0026rdquo; in Dirty COW. The proof of concept can be found here.\nThe vulnerability existed in the Linux Kernel since 2007, but was discovered later in 2016, by Phil Oester.","tags":["CVE","exploit","kernel","linux"],"title":"Understanding Dirty COW - The Linux Kernel Exploit","type":"post"},{"authors":["Chaitanya Rahalkar","Dhaval Gujar"],"categories":null,"content":"","date":1567987200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1567987200,"objectID":"3d04e4443bc72fe8f3059dcea51b3e5b","permalink":"https://rahalkar.dev/publication/pwm-ijca/","publishdate":"2019-09-09T00:00:00Z","relpermalink":"/publication/pwm-ijca/","section":"publication","summary":"We propose an offline password manager, that does not store passwords anywhere. These passwords are not even stored on the device of the user, but are generated on-the-fly using the algorithm, by providing the master password.","tags":["research","journal","cryptography"],"title":"A Secure Password Manager","type":"publication"},{"authors":null,"categories":null,"content":"","date":1564185600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1564185600,"objectID":"e58e32e157b1417a6104d7bb7268771e","permalink":"https://rahalkar.dev/project/frost-linux/","publishdate":"2019-07-27T00:00:00Z","relpermalink":"/project/frost-linux/","section":"project","summary":"An Arch Linux Based Distribution for Developers.","tags":["Demo"],"title":"Frost Linux","type":"project"},{"authors":null,"categories":null,"content":"","date":1564185600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1564185600,"objectID":"f3d78ff13614434006eba87d10cc8b2d","permalink":"https://rahalkar.dev/project/password-manager/","publishdate":"2019-07-27T00:00:00Z","relpermalink":"/project/password-manager/","section":"project","summary":"An offline Master-Password-based Password Manager.","tags":["Demo"],"title":"Password Manager","type":"project"},{"authors":null,"categories":["Technology"],"content":"Alexander Graham Bell once said- “Did you ever measure a smell? Can you tell whether one smell is just twice strong as another? Can you measure the difference between two kinds of smell and another? It is very obvious that we have very many different kinds of smells, all the way from the odour of violets and roses up to asafetida. But until you can measure their likeness and differences, you can have no science of odour. If you are ambitious to find a new science, measure a smell.” An electric nose is a device which has the capability of detecting, identifying and discriminating the presence of molecules in a sample of air. It was termed by Gardner and Barlett in 1994. The improvements over the past 20 years have led to the creation of the artificial olfaction technology.\nElectronic noses are based on the mammalian olfactory model. The olfactory receptors that are responsible for detection of odorants in the human body are analogous to the array of electronic sensors in the electronic nose. Biomimetics is a field in which the principles of biology, chemistry and engineering are applied to develop an artificial system that is based on a natural phenomenon. Electronic nose is one example of it.\nThe electronic nose comprises of three components- a detecting system, computing system and sample delivery system. The delivery system collects the required sample, which is then sent to the detection system. The detection system is a group of sensors, which change their electrical characteristics on coming in contact with the volatile compounds. Scientists were successful in creating a global fingerprint for every unique smell and flavor. The computing system has an Artificial Neural Network. This ANN is trained with qualified samples taken from a reference database. The instrument then recognizes new samples by comparing them with the existing fingerprints from the database. With the help of this architecture, the electronic nose simulates the mammalian olfactory system.This has however proven to be inaccurate in some cases of odors, where it may be made up of multiple different molecules. The electronic nose interprets these different molecules as different compounds, thereby posing inaccurate results.\nCurrent research aims to increase the accuracy, reliability and efficiency of the electric nose. With the emergence of this out-of-the-world technology, applications are endless. Detecting contamination, spoilage or adulteration of materials is a major use case. Electronic noses have been used for quality control applications in food, beverage, cosmetic and perfumery industries. They are used to identify volatile organic compounds in air,water and soil samples for conducting agricultural analysis. Currently, they are being developed for conducting medical diagnosis, where the patient’s breath is analysed to detect the presence of certain chemicals responsible for a disease. A person’s breath contains 2,500 chemical compounds. If a person is ill, his breath, when analysed can indicate the kind of disease he has. Tuberculosis is proven to be detected in this manner. Furthermore, research is being carried out to use this technique for detecting volatile organic compounds emitted by different types of cancerous cells. NASA has developed its own e-nose model that is able to sniff out cancerous Brain cells. Thus, electronic nose facilitates in detecting cancer in a non-invasive, rapid and reliable manner.\nThe scope of this technology has just scratched the surface. In a few years, this technology may even get embedded in smart phones. The Google Nose prank that the company played on us on April Fools’ day, might turn into reality. Who knows what technology has for us in the future; someday, people would be able to smell things just by searching them on Google!\n","date":1563102001,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1563102001,"objectID":"ff6c6adda18dd28c3d03fc3cbe70b632","permalink":"https://rahalkar.dev/post/what-is-an-electronic-nose/","publishdate":"2019-07-14T11:00:01Z","relpermalink":"/post/what-is-an-electronic-nose/","section":"post","summary":"Alexander Graham Bell once said- “Did you ever measure a smell? Can you tell whether one smell is just twice strong as another? Can you measure the difference between two kinds of smell and another? It is very obvious that we have very many different kinds of smells, all the way from the odour of violets and roses up to asafetida. But until you can measure their likeness and differences, you can have no science of odour.","tags":["technology"],"title":"What is an Electronic Nose?","type":"post"},{"authors":null,"categories":["Hacking"],"content":" Exploits and Vulnerabilities In computer security, a vulnerability is a weakness which can be exploited by a Threat Actor like an attacker, to perform unauthorized actions within a computer system. These vulnerabilities have to be managed to inform the developers to patch it. Vulnerability management involves identifying,classifying,remediation and mitigating vulnerabilites in computer systems. The well known CVE (Common Vulnerabilities and Exposures) system is used to record and maintain the system. It is a database of vulnerabilities found in software packages. CVEs come with their own identifier of the format \u0026gt; \u0026gt; CVE Prefix + Year of Discovery + Arbitrary Digits \u0026gt;\nMetasploit Metasploit is a popular penetration testing tool maintained by Rapid7. It has a collection of all the well known vulnerabilities and exploits in software packages with their PoCs(Proof Of Concepts). These PoC scripts can be directly used by Penetration Testers. Metasploit also has a graphical version called Armitage. Exploiting any system involves the following steps:\n1.Reconnaissance of the system. (With tools like Nmap)\n2.Choosing the appropriate exploit.\n3.Choosing and configuring the payload. (Code that will be executed on the system after successful entry)\n4.Encoding the payload to avoid detection by the system firewalls or antivirus softwares and to remove the bad characters that may cause the exploit to fail.\n5.Executing the exploit.\nYou can get Metasploit\u0026rsquo;s Open Source version here.\nFollow the instructions to install Metasploit. If you are on a Penetration Testing based OS like Kali Linux or Parrot OS, Metasploit comes pre-installed.\nStart the Metasploit console with msfconsole. Metasploit downloads the exploits and vulnerabilites database from its servers and stores it offine. Make sure your offline Metasploit database is kept updated.\nhelp will give you more information about using msfconsole.\nshow exploits will list out all the available exploits in the database. To search for a selected exploit use search software_package_name to get the list of available vulnerabilites and exploits.\nUsing the exploit is simple. (Ensure that you mention the exact path of the exploit while using it. )\nFor example: use exploit/linux/ssh/symantec_smg_ssh\nshow info will give information about what the exploit does,the author of the exploit,parameters required etc.\nType show options to know the parameters that are required for the exploit.\nUsing this for the above exploit produces:\nModule options (exploit/linux/ssh/symantec_smg_ssh): Name Current Setting Required Description ---- --------------- -------- ----------- RHOST yes The target address RPORT 22 yes The target port Exploit target: Id Name -- ---- 0 Symantec Messaging Gateway 9.5  (RHOST indicates the host on which the exploit will be executed)\nWe set the RHOST IP address by set RHOST 192.168.1.2 (The IP address) For any exploit make sure that you necessarily fill in all the required parameters. To run the exploit enter run or exploit Metasploit will then give the status of the exploit. Here are some of the important commands in Metasploit\n host website -\u0026gt; Gives the IP info\n use exploit name -\u0026gt; Use the given exploit\n search something -\u0026gt; Get exploit related information\n show exploits-\u0026gt; Shows all the exploit related information\n show options-\u0026gt;Gives the exploit options\n set SETTINGS -\u0026gt; Set the given exploit options\n run-\u0026gt;Runs the exploit\n back-\u0026gt;Go back\n exploit-\u0026gt; Start the exploit\n ?-\u0026gt;help\n show payloads -\u0026gt; Lists all the playloads\n set payload name -\u0026gt; Sets the payload\n mfsupdate-\u0026gt; Update metasploit\n  ","date":1559898595,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1559898595,"objectID":"483a399932e93732f2228984a7146d19","permalink":"https://rahalkar.dev/post/exploits-vulnerabilities-with-introduction-to-metasploit/","publishdate":"2019-06-07T09:09:55Z","relpermalink":"/post/exploits-vulnerabilities-with-introduction-to-metasploit/","section":"post","summary":"Exploits and Vulnerabilities In computer security, a vulnerability is a weakness which can be exploited by a Threat Actor like an attacker, to perform unauthorized actions within a computer system. These vulnerabilities have to be managed to inform the developers to patch it. Vulnerability management involves identifying,classifying,remediation and mitigating vulnerabilites in computer systems. The well known CVE (Common Vulnerabilities and Exposures) system is used to record and maintain the system.","tags":null,"title":"Exploits \u0026 Vulnerabilities with Introduction to Metasploit","type":"post"},{"authors":null,"categories":["Computers","Linux"],"content":" File Permissions Unix \u0026amp; Linux provides Read(r),Write(w) and Execute(x) permissions to any file on the system. If you ls -l every file with its permissions will be shown.\nThe system is divided into three types - User,Group and others. The r,w,x permissions are assigned to each type. This is well explained by the diagram shown below:\n Owner permissions − The owner\u0026rsquo;s permissions determine what actions the owner of the file can perform on the file.\n Group permissions − The group\u0026rsquo;s permissions determine what actions a user, who is a member of the group that a file belongs to, can perform on the file.\n Other (world) permissions − The permissions for others indicate what action all other users can perform on the file.\n  The chmod command helps to assign permissions or remove existing permissions. Permissions can be assigned in two ways -\n1.By using the letters r,w,x \u0026amp; a,o,u with the symbols +, - \u0026amp; =. 2. Using octal numbers. Let us create a sample file and apply some root privileges to it.\nEnter into root by typing su and entering the root password.\necho \u0026quot;Test File \u0026quot; \u0026gt;\u0026gt; only_root.txt\nCheck the default permissions for the file by typing ls -l only_root.txt. This produced:\n-rw-r--r-- 1 linus staff 0 Jan 1 08:28 only_root.txt  We will be adding readonly permissions to this file. chmod a-w only_root.txt\nLet us split the command. * chmod - Used to assign permissions. * a-w - a indicates \u0026lsquo;all\u0026rsquo; minus is remove and w is write. So it is the shorthand notation for remove write permissions from all. Similarly to add a permission we can use the plus symbol.\nonly_root.txt - Is the file Some examples of this shorthand notation:\n a+rwx - Add read,write and execute permissions to all\n u=x - Assign execute permission to the current user.\n o-wx - Remove write-execute permissions from other users.\n g+rw - Add read-write permissions to the group that the user belongs to.\n  The other mentioned way was is the octal number system. Check out the table given below:\nThe chmod command also accepts this method to assign permissions. Some examples are illustrated below:\nThe very popluar permission set that is seen is\nchmod 755 only_root.txt\nLet us break it into parts\n 7 - Read,write \u0026amp; Execute permissions to the user\n 5 - Read \u0026amp; Execute permission to the group of the user\n  The way to remember this number system is referring to the binary equivalent of the octal number.\nA set bit indicates that the permission exists and a clear bit indicates that it is removed. Similar permissions can be assigned to directories as well.\nSUID \u0026amp; SGID Permissions setuid and setgid are Unix and Linux access right flags that allow users to run an executable having the permissions of executing the binary,restricted to some other user or group.\nsetuid allows execution access to a specific user and setgid does the same for a group.\nUsually it is used to allow local users to execute some privileged binaries belonging to the root user. For example, the root user may have some privileged executables like curl,wget etc. and the root user may set the access right flags to allow any other trusted local user to use these executables.\nThese permissions are usually set with the chmod command.\nchmod ug+s /usr/bin/wget\nRunning this command in root will allow local users and groups to execute the binary. In short we have lowered the privileges for this binary executable by setting the SUID \u0026amp; SGID bit.\n","date":1559697335,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1559697335,"objectID":"c657b8faabf4dfa8806caae9af3c94d2","permalink":"https://rahalkar.dev/post/file-permissions-in-unix-linux/","publishdate":"2019-06-05T01:15:35Z","relpermalink":"/post/file-permissions-in-unix-linux/","section":"post","summary":"File Permissions Unix \u0026amp; Linux provides Read(r),Write(w) and Execute(x) permissions to any file on the system. If you ls -l every file with its permissions will be shown.\nThe system is divided into three types - User,Group and others. The r,w,x permissions are assigned to each type. This is well explained by the diagram shown below:\n Owner permissions − The owner\u0026rsquo;s permissions determine what actions the owner of the file can perform on the file.","tags":["cli","commands","linux","permissions","unix"],"title":"File Permissions in Unix/Linux","type":"post"},{"authors":null,"categories":["Linux"],"content":" File Systems In Linux Linux works on the concept of virtual file systems. Everything on a Linux/Unix system is a file. Here is a brief look at the file system structure -\nThis directory structure is followed in all Linux distributions which is similar to a Unix file system. Whenever a Linux system boots,this virtual file system is mounted. Each directory in this tree has its own significance.\n /bin - The bin directory stores all the Linux command binaries. The default commands like ls,cd,mkdir etc have their binaries located in this folder.\n /boot - This directory stores all the boot related information. The Linux kernel can be found here with usually the name vmlinuz. A separate subdirectory for GRUB can also be found here if it is installed.\n /dev - Here all the external devices are mounted. It also contains ttys,null,urandom,random devices which are internal devices used in several situations.\n /etc - Here all the configuration files are stored for different programs. A well known file - hosts can be found here. FTP,SSH and several applications store their configuration files here.\n /home - Here all the documents and personal files of different users on the system are stored. /home may have sub directories for each user.\n /lib - This directory has all the library files used by the Kernel or the system while booting. It has shared library images (Shared Object files \u0026amp; dependencies)\n /media - This directory is now no longer used. It is kept for backward compatibility to older systems having floppy or CD drivers. The CDs and floppies inserted into the drives were mounted here. Instead they can now be mounted in the /mnt directory.\n /mnt - This directory is used to mount external drives or even ISO mounts. Other Linux Virtual File systems can also be mounted here.\n /opt - Add on software package files are installed in this folder. Some softwares use this folder to place its libraries and dependencies here. It also has /bin, /doc , /include directories reserved for the system administrator.\n /root - A separate directory is provied for the root user. All the documents and root files are stored here. Other non-privileged users are not allowed access to this directory as well as all the other directories mentioned.\n /sbin - This directory contains all the system binaries. Binaries for programs like systemctl,service etc. can be found here.\n /tmp - This is a directory used to store temporary files. The system creates several temporary files which are deleted once the system is powered off. Ususally incomplete download files can be found here. Sometimes temporary mounts are also created here.\n /srv - This directory has site-specific data served by the system. Usually files related to services are stored here. Eg. ftp,rsync related files are stored here.\n /usr - It is one of the major directories in Linux. It has various sub-directories like bin(User binaries),include(All the C headers are stored here),share(Architecture independent data),local(Local system files) etc.\n /var - This directory has variable data files. It has several sub directories like cache(Applications\u0026rsquo; cache data),lib,opt(Variable /opt data),tmp(Temporary system files),log(System logs),lock(Lock files),cron(Crontab configuration file),backups etc.\n  File systems are also used on numerous storage devices that use different kinds of media. NTFS,HFS+,APFS,ExFAT etc. are some of the well known file systems designed by proprietary companies. Linux uses Extended File Systems. ext4 is the latest file system used on Linux based distributions. It is backward compatible with its older generations ext3,ext2 \u0026amp; ext. ext4 allows volumes upto size 1EiB (Exbibyte) and files with sizes upto 16 TiB (Tebibytes).\n","date":1559397877,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1559397877,"objectID":"9779b77386762d458cc0ab0cf59b8ae5","permalink":"https://rahalkar.dev/post/the-virtual-file-system/","publishdate":"2019-06-01T14:04:37Z","relpermalink":"/post/the-virtual-file-system/","section":"post","summary":"File Systems In Linux Linux works on the concept of virtual file systems. Everything on a Linux/Unix system is a file. Here is a brief look at the file system structure -\nThis directory structure is followed in all Linux distributions which is similar to a Unix file system. Whenever a Linux system boots,this virtual file system is mounted. Each directory in this tree has its own significance.\n /bin - The bin directory stores all the Linux command binaries.","tags":["filesystem","linux"],"title":"The Virtual File System","type":"post"},{"authors":null,"categories":["Computers"],"content":" Every computer follows a standard boot sequence when it starts up.\nBIOS (Basic Input Output System) The CPU runs an instruction in memory for the BIOS. This is a Jump instruction that transfers the Instruction Pointer to the code of the BIOS start-up program.\nThe BIOS runs the Power On Self Test. It is a process performed by firmware or software routines immediately after a computer or any digital device is powered on. The POST performs the following checks \u0026amp; tasks:\n verify CPU registers\n verify the integrity of the BIOS code itself\n verify some basic components like DMA, timer, interrupt controller\n find, size, and verify system main memory initialize BIOS\n pass control to other specialized extension BIOSes (if installed)\n identify, organize, and select which devices are available for booting\n discover, initialize, and catalog all system buses and devices\n provide a user interface for system\u0026rsquo;s configuration\n construct whatever system environment is required by the target operating system\n  Every hardware manufacturer has its own BIOS code hardcoded on the ROM. The BIOS has a boot sequence configured which searches for the boot devices sequentially. Booting devices can be of several types:\n1.CD Drives\n2.Hard Disk Drives\n3.USB Drives\n4.Network\nAs soon as it finds the boot device, it looks for the Master Boot Record. The MBR has number of partitions in it. If any active partition is found it is loaded into memory.\nMaster Boot Record It is a special type of boot sector at the beginning of data drives. It holds information about the logical partitions,organisation of the file systems and also a boot loader. The boot loader is responsible to load the kernel(A subset of the entire OS) into memory. It may happen that the selected memory drive has multiple operating systems. The bootloader allows selection of the OS(Along with different kernels)to be loaded. GRUB is an open source bootloader by GNU prominently seen on most Linux Distributions.\nKernel As soon as the kernel is loaded into memory by the boot loader, the Kernel mounts Linux/Unix Virtual file system. The Linux Virtual File System is of the format shown below:\nInit (Now Systemd For Linux) The Kernel executes the /sbin/init binary. Init is the first program executed by the Kernel in Kernel Space. It is given the process Id (PID) of 1. However in the recent versions init is replaced by a System Management Daemon called systemd. Systemd was designed to overcome the shortcomings of Initd. It is the parent process of all the processes.\nYou can find the source code of Systemd here.\nThere are six different run levels in Linux. (Used with Initd)\n 0 – halt\n 1 – Single user mode\n 2 – Multiuser, without NFS\n 3 – Full multiuser mode\n 4 – unused\n 5 – X11 (X Window System)\n 6 – reboot\n  Each runlevel has its own set of programs which can be seen in -\nRun level 0 – /etc/rc.d/rc0.d/ Run level 1 – /etc/rc.d/rc1.d/ Run level 2 – /etc/rc.d/rc2.d/ Run level 3 – /etc/rc.d/rc3.d/ Run level 4 – /etc/rc.d/rc4.d/ Run level 5 – /etc/rc.d/rc5.d/ Run level 6 – /etc/rc.d/rc6.d/  Each of these directories have programs starting with S (Used during startup) and K(Used during shutdown)\n","date":1558195877,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1558195877,"objectID":"64e9d19f28a99f089238840355c995e4","permalink":"https://rahalkar.dev/post/how-your-computer-starts/","publishdate":"2019-05-18T16:11:17Z","relpermalink":"/post/how-your-computer-starts/","section":"post","summary":"Every computer follows a standard boot sequence when it starts up.\nBIOS (Basic Input Output System) The CPU runs an instruction in memory for the BIOS. This is a Jump instruction that transfers the Instruction Pointer to the code of the BIOS start-up program.\nThe BIOS runs the Power On Self Test. It is a process performed by firmware or software routines immediately after a computer or any digital device is powered on.","tags":["bootstrap","computers","linux"],"title":"How Your Computer Starts","type":"post"},{"authors":null,"categories":["Linux"],"content":" Linux has completely different naming conventions while mounting drives as compared to Windows. /dev/sda,/dev/sdb,/dev/sdc etc. are the conventions in Linux.\nEach drive has its own partition table that describes the layout of partitions of the drive. MBR,GPT etc. are the different partition table standards used. The MBR partition scheme is quite old and is rarely used due to limitations like-\n It does not allow the configuration of more than four main partitions. Those partitions are called primary partitions.\n Disk partitions are limited to 2TB\n  Every disk can have three kinds of partitions as per the MBR scheme -\n Primary Partitions - Usually for storing OSes\n Logical Partitions - Every primary partition may have multiple logical partitions\n Extended Partitions - A primary partition can be extended with this to overcome the limitation of maximum four primary partitions. These partitions can be found named with the conventions /dev/sda1,/dev/sda2 etc.\n  (Enter all the commands mentioned below in root or with a sudoers\u0026rsquo; user)\nMounting drives in Linux Running fdisk -l in root lists out the number of drives that are mounted on the system. /dev/sda is usually the hard drive or SSD on which the OS is running. Other external drives can be found ususally at /dev/sdb\ndf -h may also help locating external drives.\nWhenever an external drive is inserted it is usually automatically mounted. To format a drive it must be unmounted first.\nDrives can also be mounted with mount /dev/sda /mnt if the drive to be mounted is /dev/sda and the mount location is /mnt.\nFormatting drives in Linux There are two ways to format drives. One is with a graphical interface utility (GParted) or via the terminal.\nGParted may be installed with the aptitude package manager supporting OSes by apt-get install gparted\nEntering umount /dev/sdc1 in root if sdc1 is the drive mount point, will unmount the external drive. Format the drive with the mkfs utility provided with Linux\nmkfs.ext4 /dev/sdc1 For ext4 file system mkfs.vfat /dev/sdc1 For vFat file system mkfs.ntfs /dev/sdc1 For NTFS file system  Creating a bootable drive in Linux The USB drive must be completely formatted before installing. Format the drive to any supported file system. Several GUI based utilities like etcher can be used to format and create bootable drives. Linux and Unix based systems provide the data duplicator(dd) utility to copy binary data to drives.\ndd if=/home/linus/file.iso of=/dev/sdc if - The location of the input file of - Location of the mounted drive  Status of dd can be monitored by\ngrep -l '^dd$ - Returns the process Id of dd kill -USR1 process_id - Shows the status  After dd has completed transferring the iso to the drive type sync. This is a good practice, since it forces completition of pending disk writes. It flushes the cache.\nPartitioning Drives In Linux Creating a partition GParted is an excellent utility to partition drives. It can also be done with its command-line version invoked by parted\n1.Select the disk to be operated on with select /dev/sdc (within the parted console invoked after typing parted)if the disk to be parted is at /dev/sdc\n2.Label the disk with mklabel name.\n3.Create the partition\nmkpart logical - Creates a logical partition  Enter the start and end location in megabytes. This will indicate the size of the partition. Eg. Start can be 1 and End can be 1000 indicating a partition of 1 Gb\n4.The partition can be formatted with any file system with the mkfs command as explained above.\nRemoving a partition 1.Invoke the parted utility with parted.\n2.Select the disk to be operated on with select /dev/sdc if the disk to be parted is at /dev/sdc\n3.rm 1 will remove the first partition from sdc if it has been selected\nResizing a partition 1.Invoke the parted utility with parted.\n2.Select the disk to be operated on with select /dev/sdc if the disk to be parted is at /dev/sdc\n resizepart will ask for the new start and end to resize the partition.  Recovering a partition Lost partitions can be recovered by rescue. It asks for the start and end point in Mbs. If any lost partition is found,parted will recover the lost partition.\n","date":1557981546,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1557981546,"objectID":"76ba2439bbca80dfdc8270cebdd6d1d9","permalink":"https://rahalkar.dev/post/a-guide-to-partitions-partitioning-drives-in-linux/","publishdate":"2019-05-16T04:39:06Z","relpermalink":"/post/a-guide-to-partitions-partitioning-drives-in-linux/","section":"post","summary":"Linux has completely different naming conventions while mounting drives as compared to Windows. /dev/sda,/dev/sdb,/dev/sdc etc. are the conventions in Linux.\nEach drive has its own partition table that describes the layout of partitions of the drive. MBR,GPT etc. are the different partition table standards used. The MBR partition scheme is quite old and is rarely used due to limitations like-\n It does not allow the configuration of more than four main partitions.","tags":["administration","linux"],"title":"A Guide to Partitions \u0026 Partitioning Drives in Linux","type":"post"},{"authors":null,"categories":["Linux"],"content":" What is the $PATH environment variable? Every Linux \u0026amp; Unix System has several environment variables which are dynamic variables essential for running several processes in the system. $HOME,$env being some of the well known environment variables.\nThe $PATH environment variable stores all the paths where one can find the binary executables for all the commands that we use.\nWhenever a command is invoked from the terminal,all the paths in the $PATH environment variable are looked up and if the binary is found, the command is executed.\nTrying this out on the terminal produces:\necho $PATH /home/linus/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin  The path variable can be usually edited or updated from the .bash_profile hidden file(On Unix like OS) or directly by exporting the variable with the export command.\nCreating your own command recipies\nLinux or Unix commands can be usually built by shell scripts, Python or Perl scripts. Let us create a simple Bash script that calculates the factorial of the number sent to it as an argument in the command.\n#!/bin/bash count=$1 fact=1 while [ $count -gt 0 ] do fact=$(( $fact * $count )) count=$(( $count - 1 )) done echo $fact  Create a sample file with a .sh extension and copy the factorial code as given above. Add the directory which contains the given file to your $PATH variable. Edit the variable from your .bash_profile or .profile located in your root directory with your preferred text editor.\nnano ~/.bash_profle  The file may contain several other aliases and variables but look out for the lines and update as shown below (Make sure there are no spacings between PATH and =)\nexport PATH=/home/linus/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/directory_of_bash_script  Do not forget to source the .bash_profile or .profile file with the source command or .\nsource .bash_profile  Calling the script file name from the terminal with any number as the argument to the command will print the factorial to stdout. The same thing can also be done by creating a symbolic link which will be discussed later.\n","date":1557334755,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1557334755,"objectID":"055859a7f08503b3510756a7bf1cae77","permalink":"https://rahalkar.dev/post/path-environment-variable-in-linux-unix/","publishdate":"2019-05-08T16:59:15Z","relpermalink":"/post/path-environment-variable-in-linux-unix/","section":"post","summary":"What is the $PATH environment variable? Every Linux \u0026amp; Unix System has several environment variables which are dynamic variables essential for running several processes in the system. $HOME,$env being some of the well known environment variables.\nThe $PATH environment variable stores all the paths where one can find the binary executables for all the commands that we use.\nWhenever a command is invoked from the terminal,all the paths in the $PATH environment variable are looked up and if the binary is found, the command is executed.","tags":["environmentvariables","linux","path","unix"],"title":"PATH Environment Variable in Linux/Unix","type":"post"},{"authors":null,"categories":["Computers"],"content":" Virtualisation is the process of creating a virtual version of a physical object.\nVirtualisation is of three types primarily: 1. Hardware Virtualisation - Based on simulating real hardware. This can be used to run a complete operating system. This can be further subdivided into full and paravirtualisation.\n Desktop Virtualisation - It is the concept of separating the logical desktop from the physical machine.\n Operating system level virtualisation (also called as containerisation) - It is the operating system feature in which the kernel allows the existence of multiple isolated user-space instances. Such instances are called containers. Containerisation was introduced as a Linux Kernel feature in 2010. It started gaining momentum with the introduction of Docker.\n  Hardware Virtualisation Some terminologies associated with Virtualisation:\n Virtual Machine: It is a virtual representation of a physical machine.\n Hypervisor: It is a software that manages and monitors running virtual machines.\n Host machine: The physical machine that a virtual machine is running on.\n Guest machine: The virtual machine running on the host machine.\n  The following block diagram shows the position of each component mentioned above:\nHypervisors There are two main types of hypervisors:\n Native: They run directly on the host machine and share out resources between guest machines.\n Hosted: They run as an application inside the operating system and support virtual machines running as individual processes. Eg. VirutalBox,Parallel Desktop\n  ","date":1554552337,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1554552337,"objectID":"1ee4a27bf68a1fb450dfc148e45f3d9b","permalink":"https://rahalkar.dev/post/virtualisation-in-operating-systems/","publishdate":"2019-04-06T12:05:37Z","relpermalink":"/post/virtualisation-in-operating-systems/","section":"post","summary":"Virtualisation is the process of creating a virtual version of a physical object.\nVirtualisation is of three types primarily: 1. Hardware Virtualisation - Based on simulating real hardware. This can be used to run a complete operating system. This can be further subdivided into full and paravirtualisation.\n Desktop Virtualisation - It is the concept of separating the logical desktop from the physical machine.\n Operating system level virtualisation (also called as containerisation) - It is the operating system feature in which the kernel allows the existence of multiple isolated user-space instances.","tags":["containers","docker","hypervisor","virtualbox"],"title":"Virtualisation in Operating Systems","type":"post"},{"authors":null,"categories":null,"content":"","date":1553644800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1553644800,"objectID":"d34a8f0fea0e1f7df2a394f1bb60c479","permalink":"https://rahalkar.dev/project/webtty/","publishdate":"2019-03-27T00:00:00Z","relpermalink":"/project/webtty/","section":"project","summary":"A Swiss Army knife that provides secure tunnels to localhost and allows you to share your terminal as a web application.","tags":["Demo"],"title":"WebTTY","type":"project"},{"authors":["Chaitanya Rahalkar","Anushka Virgaonkar"],"categories":[],"content":" Get a copy of this notebook here F-Strings PEP 498 introduced a new string formatting mechanism known as Literal String Interpolation or more commonly as F-strings\nWhy F-Strings? - They are fast. - They can evaluate expressions.\na = 10 b = 20 print(f\u0026quot;{a + b}\u0026quot;)  Yield The yield statement suspends function’s execution and sends a value back to caller, but retains enough state to enable function to resume where it is left off. It is used in Python generator functions.\ndef foo(bar): yield bar print(f\u0026quot;Resuming execution after returning {bar}\u0026quot;) yield bar + 1 print(f\u0026quot;Resuming execution after returning {bar + 1}\u0026quot;) yield bar + 2 print(f\u0026quot;Resuming execution after returning {bar + 2}\u0026quot;) values_returned = foo(10) for value in values_returned: print(value)  Context Managers Context Managers are used to manage resources which includes file pointers, variables etc. The scope of the variables is retained within the context.\n ''' with open(\u0026quot;file.txt\u0026quot;,\u0026quot;r\u0026quot;) as f: data = f.read() ''' class ContextManager(): def __init__(self): print('init method called') def __enter__(self): print('enter method called') return self def __exit__(self, exc_type, exc_value, exc_traceback): print('exit method called') with ContextManager() as manager: print('with statement block')  Else Clauses on Loops Python allows us to add else conditions to for/while loops as well. If the for/while loop condition fails, then the else statement is executed.\n def find_index(to_search,target): flag = False index = int() for i,value in enumerate(to_search): if value == target: flag = True index = i break if flag: return index else: return -1 my_list = ['Corey', 'Rick', 'John'] index_location = find_index(my_list, 'Steve') print('Location of target is index: {}'.format(index_location))  def find_index(to_search, target): for i, value in enumerate(to_search): if value == target: break else: return -1 return i my_list = ['Corey', 'Rick', 'John'] index_location = find_index(my_list, 'Steve') print('Location of target is index: {}'.format(index_location))  Named Tuples Named tuples are easy-to-create, lightweight object types. Named tuple instances can be referenced using object-like variable dereferencing or the standard tuple syntax. They can be used similarly to struct or other common record types, except that they are immutable.\nfrom collections import namedtuple Color = namedtuple('Color', ['red', 'green', 'blue']) color = Color(red = 55,green = 155,blue = 255) white = Color(255,255,255) print(color.blue)  Itertools - To Manage Looping Efficiently Python has an extensive suite of iterators in its itertools module, which allow for memory efficient and faster looping. It is recommended that programmers should rely on these pre-defined iterators instead of hard-coding the logic by themselves.\nfrom itertools import count, cycle, compress, groupby, permutations, combinations ## 1. Count print(\u0026quot;Demonstration of count\u0026quot;) for i in count(10,2): print(i) if i == 30: break # 2. Cycle print(\u0026quot;Demonstration of cycle\u0026quot;) iteration = 0 for i in cycle(\u0026quot;ABC\u0026quot;): print(i) iteration += 1 if iteration == 5: break # 3. Group By print(\u0026quot;Demonstration of Group by\u0026quot;) def get_state(person): return person['state'] people = [ { 'name': 'John Doe', 'city': 'Gotham', 'state': 'NY' }, { 'name': 'Jane Doe', 'city': 'Kings Landing', 'state': 'NY' }, { 'name': 'Corey Schafer', 'city': 'Boulder', 'state': 'CO' }, { 'name': 'Al Einstein', 'city': 'Denver', 'state': 'CO' }, { 'name': 'John Henry', 'city': 'Hinton', 'state': 'WV' }, { 'name': 'Randy Moss', 'city': 'Rand', 'state': 'WV' }, { 'name': 'Nicole K', 'city': 'Asheville', 'state': 'NC' }, { 'name': 'Jim Doe', 'city': 'Charlotte', 'state': 'NC' }, { 'name': 'Jane Taylor', 'city': 'Faketown', 'state': 'NC' } ] person_group = groupby(people, get_state) for group,values in person_group: print(group,[value['name'] for value in values]) # 4. Compress print(\u0026quot;Demonstration of compress\u0026quot;) values = compress(\u0026quot;Meetups\u0026quot;,[1,1,1,1,0,0,0]) print(list(values)) # 5. Permutations print(\u0026quot;Demonstration of permutations\u0026quot;) lst = [1,2,3] for perm in permutations(lst,2): print(perm) # 6. Combinations print(\u0026quot;Demonstration of combinations\u0026quot;) name = \u0026quot;ABCD\u0026quot; for comb in combinations(name,2): print(comb)  One liner if else if else condition Python allows a cleaner and shorthand syntax for defining if-else statements.\na = 10 print('Even') if a % 2 == 0 else print('False')  Swapping variables Variable swapping can be done without the need of a third temporary variable.\na,b = 1,2 print(a,b) a,b = b,a print(a,b)  Chained function call Python allows a cleaner and shorthand syntax for defining chained else-if statements.\n def add(x,y): return x + y def sub(x,y): return x - y def mul(x,y): return x * y x = 1 # Lengthy approach if x == 1: print(add(10,20)) elif x == 2: print(sub(10,20)) elif x == 3: print(mul(10,20)) # Quick approach print((add if x == 1 else sub if x == 2 else mul)(10,20))  Print an array with strings as one comma-separated string The power of Python allows you to print a list to the standard I/O, with the choice of your own delimiter like a comma.\nrow = [\u0026quot;1\u0026quot;, \u0026quot;bob\u0026quot;, \u0026quot;developer\u0026quot;, \u0026quot;python\u0026quot;] print(*row, sep=',')  Enumerate List enumeration can be done without the need of maintaining manual counter with the enumerate function.\ncities = [\u0026quot;London\u0026quot;, \u0026quot;Paris\u0026quot;, \u0026quot;New York\u0026quot;] # Lengthy approach count=0 for city in cities: print(count,city) count+=1 # Recommended approach for count,city in enumerate(cities): print(count,city)  0 London 1 Paris 2 New York 0 London 1 Paris 2 New York  Zip Two or more iterables can be iterated in parallel with the zip function.\nroll_no = [101,102,103,104,105,106,107,108,109,110] marks = [45,32,23,15,44] # Lengthy approach '''for i in range(len(roll_no)): r = roll_no[i] m = marks[i] #print(r,m) ''' # Recommended approach for r,m in zip(roll_no,marks): print(r,m)  101 45 102 32 103 23 104 15 105 44  Hiding Your Source Code Since Python is built on C, the Python interpreter has the benefits that a C compiler has. Python code can be translated to a runnable binary with the .pyc file. The Python interpreter converts the .py file to a runnable binary in order to prevent recompilation of the code and save time in future. If the same python script is called again, the interpreter simply exectutes the precompiled .pyc file to save time.\nchaitanya@meetups$ python3 -m py_compile foo.py  GetPass Function Ever created a Python script that accepts passwords as input? The normal input() function in Python shows on the screen what you are typing. The GetPass function allows you to get passwords as input the UNIX style.\nfrom getpass import getpass username = input(\u0026quot;Enter your username: \u0026quot;) password = getpass(\u0026quot;Enter your password: \u0026quot;) print(username,password,sep = '\\n')  HTTP Server Want to host your files or a static website? Python has a built in minimalistic HTTP Server useful for serving static content. It is fast and easy to use.\nanushka@meetups$ python3 -m http.server 8001  Hiding Secrets \u0026amp; Keys with Enviroment variables Exposing your private keys or passwords in Python scripts is not a good idea, especially if you are uploading the code on some online repository. Secrets and keys should be stored in environment variables, which then Python can access through the  os  module.\nOn a Linux/Mac machine -\nchaitanya@meetups$ nano .bash_profile  Add a line to the .bash_profile file -\nexport password=\u0026quot;mypassword\u0026quot;  import os print(os.environ.get(\u0026quot;password\u0026quot;))  Underscore placeholders There are five underscore variable naming conventions used in Python  Single Leading Underscore: _var Single Trailing Underscore: var_ Double Leading Underscore: __var Double Leading and Trailing Underscore: _var_ Single Underscore: _\n_x = 10 # 1. Variable is for internal use class_ = 14 # 2. To use keywords as variable names for_ = \u0026quot;Meetups\u0026quot; # 3. Acts as a sort-of private variable (Name-mangling) class Base(object): def __init__(self): # Constructor self.__foo = 7 class Derived(Base): def __init__(self): super().__init__() # Calling the base class constructor self.__foo = 10 s = Derived() print(\u0026quot;Value from derived class: \u0026quot;,s._Derived__foo) print(\u0026quot;Value from base class: \u0026quot;,s._Base__foo) # 4. __var__ is reserved for internal Python magic methods and variables. Not recommended to be used by programmer. # 5. Single underscore acts as useless variables by convention. It is also used as a temporary variable in Python REPL for _ in range(2): # Code None   Secrets Module Python has a module to generate secure random numbers. It uses the operating system\u0026rsquo;s random number generator.\nimport secrets token = secrets.token_hex(16) print(token)   # Why the random module in Python is insecure r1 = random.Random(31337) outputs = [r1.getrandbits(32) for _ in range(625)] mtr = MT19937Recover() # Mersenne Twister Breaker r2 = mtr.go(outputs) print(r1.getrandbits(32) == r2.getrandbits(32))  Shallow and Deep Copy In Python, assignment statements do not copy objects, they create bindings between a target and an object. When we use = operator user thinks that this creates a new object; well, it doesn’t. It only creates a new variable that shares the reference of the original object.\n# Shallow copy l = [1,2,3,4,5] p = l l[0] = 100 print(p[0])  100  # Deep copy import copy l = [1,2,3,4,5] p = copy.deepcopy(l) # Creates a deep copy q = list(l) # Creates a deep copy l[0] = 100 print(p[0]) print(q[0])  1 1  a = [0 for i in range(5)] mat = list() for _ in range(5): mat.append(a) # Creates a shallow copy mat[1][1] = 10 print(mat)  Default Dictionary Python allows us to preset dictionary values even if a given key does not exist in the dictionary. This can be done with defaultdict from collections module.\nimport collections data = { 'Tom':33, 'Jack':45, 'Jill':32, 'Mark':45, 'Sam':38 } # Lengthy way if 'John' in data: print(data['John']) else: print('Absent') # Recommended way print(data.get('John','Absent')) # Recommended way marks_data = collections.defaultdict(int) print(marks_data['Tom']) pass_data = collections.defaultdict(str) print(pass_data['Tom']) students_data = collections.defaultdict(lambda:'Absent') students_data.update(data) print(students_data['Jim'])  Type Hinting Type hinting is a Python programming convention that allows us to specify the return type \u0026amp; parameters of the function. This is a good coding practice that improves code readability.\ndef headline_without_type(text, align=True): if align: return f\u0026quot;{text.title()}\\n{'-' * len(text)}\u0026quot; else: return f\u0026quot; {text.title()} \u0026quot;.center(50, \u0026quot;o\u0026quot;) def headline_with_type(text: str, align: bool = True) -\u0026gt; str: if align: return f\u0026quot;{text.title()}\\n{'-' * len(text)}\u0026quot; else: return f\u0026quot; {text.title()} \u0026quot;.center(50, \u0026quot;o\u0026quot;) print(headline_without_type(\u0026quot;python type checking\u0026quot;)) print(headline_with_type(\u0026quot;python type checking\u0026quot;, False))  == vs is There are two ways in Python to check the equivalence of two variables. However there is a big difference between their compiler level implementation.\nlist1 = [1,2,3] list2 = list1 list3 = list(list1) print(list1 == list2) print(list1 == list3) print(list1 is list2) print(list1 is list3)  True True True False  Extended Iterable Unpacking Extended iterable unpacking allows us to use star operator to gather items from an iterable as a list.\na,b,c = [1,2,3] print(a,b,c) cities = ['London','Paris','New York','Boston','Jerusalem','California'] start,*route,end = cities print(start) print(route) print(end)  1 2 3 London ['Paris', 'New York', 'Boston', 'Jerusalem'] California  Antigravity Python is not that boring! It is full of strange and interesting things that never stop surprising us. This is really one of them!\nimport antigravity  ","date":1549324800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1549324800,"objectID":"f541ab41a2ca7e1dc95b7d1d1af922b9","permalink":"https://rahalkar.dev/slides/python_workshop_meetups/","publishdate":"2019-02-05T00:00:00Z","relpermalink":"/slides/python_workshop_meetups/","section":"slides","summary":"Really interesting and useful secrets of Python you should know about.","tags":["python","meetups","talk"],"title":"Hidden Secrets of Python","type":"slides"},{"authors":["Chaitanya Rahalkar","Dhaval Gujar"],"categories":null,"content":"How much does the Internet know about you? It is a question that most of us will struggle to answer today. This illiteracy and nescience about the internal working of products and services that we use daily can prove to be exceedingly dangerous. The blind trust and complete faith of consumers in dot-com companies is being exploited at unprecedented levels, without the knowledge of the said beneficiaries. The lack of transparency in how our messages and other private data moves through the Internet, and how these tech giants make use of it has forced leaders like Tim Berners-Lee, founder of the WWW to radically overhaul his own creation! Migrating to a “Decentralized Internet” may seem like a longshot at best, but it is a necessary transition that all of us will have to make when an eventual tipping point is reached and the people realize that the “Data belongs to me”.\nAsk a 10-year-old Jack what Facebook is for, and he’ll tell you it is “to help me make friends” But, Facebook’s board is not working to help Jack make more friends. It is looking to make a hefty profit out of Jack’s social graph. The discernment that we are not the customers of Facebook, we are the product, Facebook is selling us to advertisers, is yet to kick-in. Looking back at the last year, there’s evidence that Internet has become more of a purveyor of lies than of truth because of the way the targeted advertising model encourages people to put things online which are likely to be clicked upon (Clickbait) With the Indian SC declaring privacy as a “fundamental” right, it is clear that the companies who treat data ethics as a social responsibility as important as environmental awareness are tomorrow’s winners. Digital trust is paramount for digital growth and welfare.\nGet a copy of the talk slides here\n","date":1531317600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1531317600,"objectID":"1182335cb362bed9349b5bbdb5599425","permalink":"https://rahalkar.dev/talk/ethics-privacy/","publishdate":"2018-07-11T14:00:00Z","relpermalink":"/talk/ethics-privacy/","section":"talk","summary":"The Internet was created to be an open source to get connected to the rest of the world, to share information and bring the world closer. Looking at how we have gone through these years, the Internet has just become a business model. The Internet community is getting wrongly influenced. The government of America has challenged the net neutrality principles.","tags":["ethics","platforms","privacy"],"title":"Ethics for Platforms","type":"talk"},{"authors":["Chaitanya Rahalkar"],"categories":null,"content":"Get a copy of the talk slides here\n","date":1524319200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1524319200,"objectID":"0596310414825f4dae277982596e7cec","permalink":"https://rahalkar.dev/talk/no-sql/","publishdate":"2018-04-21T14:00:00Z","relpermalink":"/talk/no-sql/","section":"talk","summary":"MongoDB is on of the widely used databases. It is a semi-structured database that stores data in the form of documents (JSON like structures). We discuss how MongoDB compares with a relational database.","tags":["mongodb","databases","nosql"],"title":"MongoDB (NoSQL Databases)","type":"talk"},{"authors":["Chaitanya Rahalkar"],"categories":null,"content":"With the exponentially scaled World Wide Web, the standard HTTP protocol has started showing its limitations. With an increased amount of data duplication \u0026amp; accidental deletion of files on the Internet, the P2P file system called IPFS completely changes the way files are stored. IPFS is a file storage protocol allowing files to be stored on decentralized systems. In the HTTP client-server protocol, files are downloaded has from a single source. With files stored on a decentralized network, IPFS allows packet retrieval from multiple sources, simultaneously saving considerable bandwidth. IPFS uses a content-addressed block storage model with content-addressed hyperlinks. Large amounts of data can is addressable with IPFS with the immutable and permanent IPFS links with meta-data stored as Blockchain transactions. This timestamps and secures the data, instead of having to put it on the chain itself. Our paper proposes a model to use the decentralized file storage system of IPFS, and the integrity preservation properties of the Blockchain, to store and distribute data on the Web.\nWith the ever-expanding World Wide Web, the data generated on the web has grown vastly. The amount of data generated daily is at a staggering 2.5 quintillion bytes. This pace is gaining constant momentum due to the inclusion of new IoT devices every day. Sensory data produced by IoT devices get bulkier as modern devices are added to the Internet. To counter the problem of data handling, many distributed file systems were introduced. The popular ones being Napster, BitTorrent, KaZaA, supporting millions of distributed users. Among all of them, HTTP - one of the oldest protocols on the Internet is the biggest distributed file system, when coupled with browsers allowing users to share files globally. With the increase in the scalability of the World Wide Web, the reliability of HTTP began to degrade. Keeping track of terabytes of data and moving these files over the Web is a difficult task. Several other protocols were introduced to tackle the problem of scalability and decentralization with an intention of replacing the well-established reign of HTTP. The other problem with HTTP is security and data integrity. As a countermeasure, the inclusion of Blockchain technology was introduced. Blockchain technology cannot be used to store the entire data due to its distributed ledger protocol. This protocol states that every node in the Blockchain must preserve a copy of the data, on the chain. Hence, storing petabytes of data on the Blockchain is infeasible. This model proposes to store only the file metadata, summarizing necessary information about data, on the Blockchain. This data, being in bytes for a single file, reduces the overall size of the ledger.\nGet a copy of the talk slides here\n","date":1522148400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1522148400,"objectID":"8c867c4b632a4c4e73813153a2729cdc","permalink":"https://rahalkar.dev/talk/content-addressed-filesystem/","publishdate":"2018-03-27T11:00:00Z","relpermalink":"/talk/content-addressed-filesystem/","section":"talk","summary":"With the exponentially scaled World Wide Web, the standard HTTP protocol has started showing its limitations. With an increased amount of data duplication \\\u0026 accidental deletion of files on the Internet, the P2P file system called IPFS completely changes the way files are stored. IPFS is a file storage protocol allowing files to be stored on decentralized systems. In the HTTP client-server protocol, files are downloaded  has from a single source. With files stored on a decentralized network, IPFS allows packet retrieval from multiple sources, simultaneously saving considerable bandwidth. IPFS uses a content-addressed block storage model with content-addressed hyperlinks. Large amounts of data can is addressable with IPFS with the immutable and permanent IPFS links with meta-data stored as Blockchain transactions. This timestamps and secures the data, instead of having to put it on the chain itself. Our paper proposes a model to use the decentralized file storage system of IPFS, and the integrity preservation properties of the Blockchain, to store and distribute data on the Web.","tags":["http","peer-to-peer","blockchain","file system"],"title":"Content Addressed Peer-to-Peer File System for the Web with Blockchain-Based Metadata Integrity","type":"talk"},{"authors":["Chaitanya Rahalkar"],"categories":null,"content":"Get a copy of the talk slides here\n","date":1503658800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1503658800,"objectID":"cd0fb0cf34c48fb506ec5991510bcf2a","permalink":"https://rahalkar.dev/talk/crypto-blockchain/","publishdate":"2017-08-25T11:00:00Z","relpermalink":"/talk/crypto-blockchain/","section":"talk","summary":"An explanatory talk about blockchain, cryptocurrencies and the impact of a decentralised financial system on the world economy.","tags":["blockchain","cryptocurrency","bitcoin","decentralised systems"],"title":"Cryptocurrencies and Blockchain","type":"talk"},{"authors":null,"categories":null,"content":" I love to explore the vast field of Computer Science. I\u0026rsquo;ve dabbled with a variety of stuff over the past few years. While doing so, I\u0026rsquo;ve had to invest considerable amount of time in digging up resources from the corners of the Web. Also, people often ask me for suggestions regarding tutorials and courses about something they wish to learn.\nThus, I decided to compile this list with the hope that it would be useful to people and to also help me keep track of some great stuff I\u0026rsquo;ve found on the Web.\nPlease keep in mind that I\u0026rsquo;ve not consumed all the material mentioned on this list. If I\u0026rsquo;ve mentioned 4 different resources for a topic, it means that I\u0026rsquo;ve skimmed over all of them, but may have decided to go with one of those, personally. However, I\u0026rsquo;ve added all of them since everyone has a different taste. The lists are mostly in my order of preference.\nDisclaimer: Some of the links to books on Amazon are affiliate links. If you use them while purchasing, they grant me a small percentage of the cost of the book. Please note that the cost remains the same for you; Amazon simply gives me a small cut out of it. If you decide to buy a book, please use my link as it helps support the blog. Thanks!\nSimilar Lists  Daniel Stefanovic on GitHub: Build Your Own X freeCodeCamp: 400+ Online Courses With Real College Credit That You Can Access For Free  Table of Contents  C C++ Compilers Data Science Docker Game Development Go Git and GitHub Interpreters \u0026amp; Bytecode Virtual Machines Java JavaScript Machine Learning MongoDB Node.js OAuth 2.0 Authorization Framework OpenGL Operating Systems Python React Redis REST Web Development  C Beginner  Derek Banas Giraffe Academy Caleb Curry  Advanced  Socket Programming with C by Eduonix Crafting Interpreters by Robert Nystrom Stack-based Virtual Machine by Philip Bohun Corgi64: Register-based Virtual Machine by Philip Bohun  Books  The C Programming Language by Brian Kernighan and Dennis Ritchie  Documentation  C Documentation at DevDocs  C++ Beginner  C++ by Giraffe Academy  Advanced/Modern  C++ 11 by Bo Qian Advanced C++ by Derek Banas Modern C++ by TheChernoProject Concurrency in C++ by Bo Qian C++ 11 Smart Pointers by CodesBay  Books  The C++ Programming Language by Bjarne Stroustrup C++: The Complete Reference by Herbert Schildt  Documentation  cppreference C++ Language Reference by Microsoft  Compilers  Georgia Tech\u0026rsquo;s Compilers: Theory and Practice Stanford\u0026rsquo;s Compilers Bisqwit\u0026rsquo;s Create a Compiler Series Write an Compiler in Go by Thorsten Ball  Data Science  IBM Data Science Professional Certificate HarvardX\u0026rsquo;s Data Science Professional Certificate  Docker  A Beginner-Friendly Introduction to Containers, VMs and Docker by Preethi Kasireddy on freeCodeCamp Learn Docker in 12 Minutes by Jake Wright Exploring Docker by Traversy Media Docker Official Documentation Building a container from scratch by Liz Rice  Game Development C++ OpenGL/DirectX  ChilliTomatoNoodle TheChernoProject Handmade Hero  SFML/SDL  Let\u0026rsquo;s Make Games Hilze Vonck Sonar Systems  Unity 3D  Brackeys The Complete Unity Indie Game Developer Course Unity: Beginner to Advanced - Complete Course  Java (LWJGL)  ThinMatrix TheChernoProject  Miscellaneous  CS50\u0026rsquo;s Introduction to Game Development by Harvard University Matthew Hopson OneLoneCoder/javidx9 Harold Serrano  Go Beginner  A Tour of Go Introduction to Go by Michael Van Sickle Go Crash Course by Traversy Media Write a Web App in Go by Davy Wybiral  Advanced  Gophercises by Jon Calhoun Write an Interpreter in Go by Thorsten Ball Write an Compiler in Go by Thorsten Ball Gaming in Go by Velovix Games with Go by Jack Mott Flappy Bird in Go by JustForFunc  Books  An Introduction to Programming in Go by Caleb Doxsey The Go Programming Language by Alan A. A. Donovan and Brian Kernighan  Documentation  Official Documentation  Git and GitHub  Git Tutorial by Corey Schafer Git and GitHub Crash Course by Traversy Media Interactive Git Tutorial Interactive Tutorial on Git Branching  Interpreters \u0026amp; Bytecode Virtual Machines  Crafting Interpreters by Robert Nystrom (cannot recommend this gem enough) Write an Interpreter in Go by Thorsten Ball So You Want to Build a Language VM by Fletcher Haynes Simple Interpreter by Ruslan Spivak Stack-based Virtual Machine by Philip Bohun Corgi64: Register-based Virtual Machine by Philip Bohun  Java Beginner  Programming with Mosh Caleb Curry Derek Banas  Advanced  JavaFX by thenewboston JavaFX by Genuine Coder Building REST APIs with JAX-RS by Java Brains  Books  Java: The Complete Reference by Herbert Schildt  JavaScript Beginner Tutorials \u0026amp; Crash Courses  Introduction to JavaScript for Developers by Java Brains Traversy Media Programming with Mosh freeCodeCamp on YouTube Introduction to JavaScript at Scrimba ES6 Tutorial at Scrimba  Advanced and Full Courses  freeCodeCamp Traversy Media The Net Ninja Object-Oriented JavaScript by Mosh Hamedani  Machine Learning  Stanford\u0026rsquo;s Machine Learning by Andrew Ng University of Washington\u0026rsquo;s Machine Learning Specialization MITx\u0026rsquo;s Machine Learning with Python: From Linear Models to Deep Learning StatQuest\u0026rsquo;s Machine Learning Series  MongoDB  MongoDB Tutorial by The Net Ninja MongoDB Crash Course by Traversy Media  Node.js Tutorials \u0026amp; Crash Courses  The Net Ninja freeCodeCamp on YouTube Traversy Media Academind Programming with Mosh  Full Courses  Traversy Media Academind Programming with Mosh freeCodeCamp  Project Tutorials Check out the following channels on YouTube which build a lot of stuff with Node.js: - Traversy Media - The Net Ninja - Academind - freeCodeCamp\nOAuth 2.0 Authorization Framework  OAuth 2.0: An Overview OAuth 2.0 by Nate Barbettini An Introduction to OAuth 2 by the DigitalOcean Community  OpenGL Video Tutorials with C++  TheChernoProject thebennybox Sonar Systems Suraj Sharma  Video Tutorials with Java  ThinMatrix thebennybox  Books  Learn OpenGL  Documentation  docs.gl  Operating Systems  The Little Book About OS Development Georgia Tech\u0026rsquo;s Introduction to Operating Systems Georgia Tech\u0026rsquo;s Advanced Operating Systems Write an OS from scratch Write your own Operating System Writing an Operating System  Python All Things Python  sentdex Corey Schafer  Tutorials  Python for Beginners by Mosh Python for Programmers by Mosh Derek Banas Giraffe Academy  Web Development  Django Tutorial by The Net Ninja Tango with Django Django Tutorial by Max Goodridge Flask Tutorial by Traversy Media  React Tutorials and Crash Courses  Kirupa Chinnathambi Academind Traversy Media Programming With Mosh  Full Courses  Academind The Net Ninja Programming With Mosh freeCodeCamp Scrimba  Redis  Crash Course by Traversy Media Try Redis Official Documentation Writing System Software: A series about Redis internals by its creator, Salvatore Sanfilippo Redis Source Code on GitHub  REST  Building REST APIs with JAX-RS by Java Brains Building a RESTful API with Node.js by Academind What is a REST API? by Telusko REST and HTTP Explained by Traversy Media  Web Development  freeCodeCamp W3Schools Traversy Media The Net Ninja Academind Scrimba  ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"097c5987d6d4e566a0e6cd8613e4e72c","permalink":"https://rahalkar.dev/awesome-learning/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/awesome-learning/","section":"","summary":"I love to explore the vast field of Computer Science. I\u0026rsquo;ve dabbled with a variety of stuff over the past few years. While doing so, I\u0026rsquo;ve had to invest considerable amount of time in digging up resources from the corners of the Web. Also, people often ask me for suggestions regarding tutorials and courses about something they wish to learn.\nThus, I decided to compile this list with the hope that it would be useful to people and to also help me keep track of some great stuff I\u0026rsquo;ve found on the Web.","tags":["learning","resources","courses","tutorials","certificates"],"title":"Awesome Learning","type":"page"}]